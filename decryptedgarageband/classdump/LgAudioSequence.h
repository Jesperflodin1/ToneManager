//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "LgTronSequence.h"

@interface LgAudioSequence : LgTronSequence
{
    // Error parsing type: {MATronDriveSequenceAudioRegion="_vptr$MATronDriveSequence"^^?"_scheduleTime"Q"_collectionTime"Q"_parentSequence"^{MATronDriveSequence}"_nextSequence"^{MATronDriveSequence}"_parentStream"^{MSuperStream}"_stopGroup"{atomic<MATronDriveAlignedGroup *>="__a_"A^{MATronDriveAlignedGroup}}"_playGroup"{atomic<MATronDriveAlignedGroup *>="__a_"A^{MATronDriveAlignedGroup}}"_state"i"_sequenceID"i"_sequenceNumber"i"_callback"@?"_callbackAtClock"q"_endAtClock"q"_sequenceDelay"q"_processDelay"q"_transferSamplePosition"q"_recordingDelay"q"_recordingClock"q"_recordingOffset"q"_recordingInfo"{?="clockOfClipStart"q"clockOfClipEnd"q"clockDelay"q"clipID"i"transpose"d"fReverse"B"speed"f"volumeOffset"f"clipOffset"q"clipLength"q"fLooping"B"eventSource"i}"_loopState"{LoopState="when"q"samplePosition"q"index"q"scaledIndex"q"count"q"start"q"length"q"clock"q"scaledStart"q"scaledLength"q"scaledClock"q"samplesPerClock"d"scaledSamplesPerClock"d"speed"f"_elapsed"q"_limit"q"_limited"B}"_repeatState"{LoopState="when"q"samplePosition"q"index"q"scaledIndex"q"count"q"start"q"length"q"clock"q"scaledStart"q"scaledLength"q"scaledClock"q"samplesPerClock"d"scaledSamplesPerClock"d"speed"f"_elapsed"q"_limit"q"_limited"B}"_nextRepeatState"{LoopState="when"q"samplePosition"q"index"q"scaledIndex"q"count"q"start"q"length"q"clock"q"scaledStart"q"scaledLength"q"scaledClock"q"samplesPerClock"d"scaledSamplesPerClock"d"speed"f"_elapsed"q"_limit"q"_limited"B}"_currentLoop"^{LoopState}"_nextLoop"^{LoopState}"_transpose"d"_sequenceTranspose"d"_speed"f"_sequenceSpeed"f"_sequenceSpeedShift"i"_sequenceTempo"f"_loopProgress"f"_volume"{Volume="offset"f"audioGain"f"velocityOffset"c}"_sequenceVolume"{Volume="offset"f"audioGain"f"velocityOffset"c}"_sequenceStart"q"_sequenceLength"q"_retriggerLength"q"_loopLimit"q"_repeatAnchor"q"_propertyClock"q"_attached"B"_reset"B"_reschedule"B"_repeating"B"_clipReversed"B"_regionReversed"B"_sequenceReversed"B"_followsTempo"B"_sequenceFollowsTempo"B"_muted"B"_sequenceMuted"B"_ignoresTranspose"B"_playFromRelativePosition"B"_originalLoopLength"q"_originalLoopLimit"q"_dataProvider"^{CAudioDataProvider}"_renderer"^{Renderer}"_sampleStart"q"_sampleEnd"q"_crossFadeSamples"{pair<float, float>="first"f"second"f}"_needsCrossFade"B"_vptr$WarpMarkerProvider"^^?"_fileRef"{CFileRef="mURL"^{__CFURL}"mFlags"q"mTmpPath"*}"_audioFile"{shared_ptr<MDFile>="__ptr_"^{MDFile}"__cntrl_"^{__shared_weak_count}}"_audioFileInfo"{AudioFileInfo="filetype"I"compressionType"I"sampleRate"q"bitSize"c"numChannels"c"fSwap"c"fFloat"c"dataOffset"q"numFrames"q"numBytes"q"fCompressed"i"fReCycleFile"i"format"i"channelIDList"[8i]"regionStart"q"regionFrames"q"timeStamp"Q"loopStart"q"loopFrames"q"keyNote"c"detune"c"keyRangeStart"c"keyRangeEnd"c"velRangeStart"c"velRangeEnd"c"gain"s"numTransients"q"beatCount"f"isOneShotAppleLoop"B"isMinor"B"offsetMidiData"q"sizeMidiData"q"offsetGenInstData"q"sizeGenInstData"q"offsetEvSqData"q"sizeEvSqData"q"offsetChordTrackData"q"sizeChordTrackData"q"offsetChannelStrip"q"sizeChannelStrip"q"ckidChannelStrip"I"offsetFileAnnotation"q"sizeFileAnnotation"q"numPackets"q"framesPerPacket"q"primingFrames"i"remainderFrames"i"sizeCookie"q"tempo"d"numTempoMarker"q"numGenericMarker"q"numRegions"q"cacheCompare"q"message"i}"_audioFileData"^{FileData}"_audioTransients"{vector<long, std::__1::allocator<long> >="__begin_"^q"__end_"^q"__end_cap_"{__compressed_pair<long *, std::__1::allocator<long> >="__first_"^q}}"_biasedTransients"{vector<long, std::__1::allocator<long> >="__begin_"^q"__end_"^q"__end_cap_"{__compressed_pair<long *, std::__1::allocator<long> >="__first_"^q}}"_biasedFileData"{BiasedFileData="_vptr$FileData"^^?"m_lengthInFrames"I"m_dataSamples"^f"m_api16DataSamples"^^s"m_fileMappedSamples"^v"m_fileMappedConverter"^?"m_transients"^q"m_numberOfTransients"i"m_numberOfBeatsFromFile"f"m_keyAsMidiNoteFromFile"i"m_sampleRateFromFile"i"m_channelsPerFrameFromFile"i"m_bytesPerFrameFromFile"i"m_PreRenderMutex"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"m_PreRenderQueue"{deque<PreRenderInfo *, std::__1::allocator<PreRenderInfo *> >="__map_"{__split_buffer<PreRenderInfo **, std::__1::allocator<PreRenderInfo **> >="__first_"^^^{PreRenderInfo}"__begin_"^^^{PreRenderInfo}"__end_"^^^{PreRenderInfo}"__end_cap_"{__compressed_pair<PreRenderInfo ***, std::__1::allocator<PreRenderInfo **> >="__first_"^^^{PreRenderInfo}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::__1::allocator<PreRenderInfo *> >="__first_"Q}}"_parent"^{FileData}"_api16DataSamplesBiased"[2^s]"_transientsBiased"{vector<long, std::__1::allocator<long> >="__begin_"^q"__end_"^q"__end_cap_"{__compressed_pair<long *, std::__1::allocator<long> >="__first_"^q}}"_sampleCount"q"_sampleOffset"q}"_currentFileData"^{FileData}"_memoryMappedSamples"^{__CFData}"_audioBPM"f"_audioBeats"f"_elasticAudioType"i"_timeStretcher"^{CElasticAudio}"_fileKey"c"_sequenceKey"c"_regionRenderer"{RegionRenderer="_vptr$Renderer"^^?"_sequence"^{MATronDriveSequenceAudio}"_state"^{LoopState}"_lastSamples"{pair<float, float>="first"f"second"f}"_timeStretcher"^{CElasticAudio}"_fileData"^{FileData}"_reversed"B"fadeLoopOutAtEnd"B}"_nextReversedSamplesClock"q"_analyzedAudio"B"_isAppleLoop"B"_oneShotAppleLoop"B"_audioFileShared"B"_audioFileMemoryMapped"B"_audioHasTempo"B}, name: _audioSequence
}

- (id).cxx_construct;
- (void).cxx_destruct;
// Error parsing type for property audioSequence:
// Property attributes: T^{MATronDriveSequenceAudioRegion=^^?QQ^{MATronDriveSequence}^{MATronDriveSequence}^{MSuperStream}{atomic<MATronDriveAlignedGroup *>=A^{MATronDriveAlignedGroup}}{atomic<MATronDriveAlignedGroup *>=A^{MATronDriveAlignedGroup}}iii@?qqqqqqqq{?=qqqidBffqqBi}{LoopState=qqqqqqqqqqqddfqqB}{LoopState=qqqqqqqqqqqddfqqB}{LoopState=qqqqqqqqqqqddfqqB}^{LoopState}^{LoopState}ddffiff{Volume=ffc}{Volume=ffc}qqqqqqBBBBBBBBBBBBBqq^{CAudioDataProvider}^{Renderer}qq{pair<float, float>=ff}B^^?{CFileRef=^{__CFURL}q*}{shared_ptr<MDFile>=^{MDFile}^{__shared_weak_count}}{AudioFileInfo=IIqccccqqqiii[8i]qqQqqccccccsqfBBqqqqqqqqqqIqqqqiiqdqqqqi}^{FileData}{vector<long, std::__1::allocator<long> >=^q^q{__compressed_pair<long *, std::__1::allocator<long> >=^q}}{vector<long, std::__1::allocator<long> >=^q^q{__compressed_pair<long *, std::__1::allocator<long> >=^q}}{BiasedFileData=^^?I^f^^s^v^?^qifiiii{_opaque_pthread_mutex_t=q[56c]}{deque<PreRenderInfo *, std::__1::allocator<PreRenderInfo *> >={__split_buffer<PreRenderInfo **, std::__1::allocator<PreRenderInfo **> >=^^^{PreRenderInfo}^^^{PreRenderInfo}^^^{PreRenderInfo}{__compressed_pair<PreRenderInfo ***, std::__1::allocator<PreRenderInfo **> >=^^^{PreRenderInfo}}}Q{__compressed_pair<unsigned long, std::__1::allocator<PreRenderInfo *> >=Q}}^{FileData}[2^s]{vector<long, std::__1::allocator<long> >=^q^q{__compressed_pair<long *, std::__1::allocator<long> >=^q}}qq}^{FileData}^{__CFData}ffi^{CElasticAudio}cc{RegionRenderer=^^?^{MATronDriveSequenceAudio}^{LoopState}{pair<float, float>=ff}^{CElasticAudio}^{FileData}BB}qBBBBBB},R

- (_Bool)synchronizeWithRegions;
- (id)initWithSong:(struct CSong *)arg1 clip:(struct CClip *)arg2 error:(id *)arg3;

@end

