//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "ABAudioSource.h"

@class ABAudioMute, ABMixer, ABPeer, ABPort, DBLocalEndpoint, NSArray, NSMutableOrderedSet, NSTimer;

@interface ABAudioUnitSource : ABAudioSource
{
    struct OpaqueAudioComponentInstance *_audioUnit;
    unsigned int _sampleCount;
    _Bool _priming;
    _Bool _willSetUpstreamSources;
    _Bool _hosting;
    _Bool _isCleanningUpAudioUnit;
    _Bool _peerIsPresent;
    _Bool _isTearedDown;
    _Bool _willBeTearedDown;
    _Bool _renderingErrorOcurred;
    // Error parsing type: {?="buffer"^v"length"i"tail"i"head"i"fillCount"Ai"atomic"B}, name: _buffer
    // Error parsing type: {?="buffer"^v"length"i"tail"i"head"i"fillCount"Ai"atomic"B}, name: _interimBuffer
    // Error parsing type: {?="buffer"^v"length"i"tail"i"head"i"fillCount"Ai"atomic"B}, name: _bypassBuffer
    _Bool _isReadingBypassBuffer;
    _Bool _needsFadingBypassBuffer;
    CDStruct_1b89fbd9 _upstreamSourceFunctionTable;
    ABPeer *_peer;
    ABPort *_port;
    ABAudioMute *_publicAudioMute;
    ABAudioMute *_privateAudioMute;
    _Bool _isWaitingForPeer;
    NSMutableOrderedSet *_hostingCompletionCallbacks;
    int _launchState;
    _Bool _isAUXSource;
    _Bool _isSavingPreset;
    _Bool _auxTimestampWorkaroundEnabled;
    _Bool _disconnectHappened;
    _Bool _sourceIsRendered;
    _Bool _isByPassed;
    _Bool _fillBypassBuffer;
    double _beatTime;
    double _tempo;
    _Bool _isPlaying;
    unsigned int _transportStateCounter;
    _Bool _transportStateChanged;
    _Bool _audioUnitFailed;
    _Bool _audioUnitIsInitialized;
    _Bool _audioUnitIsInstantiated;
    _Bool _disableAutomaticRestart;
    NSArray *_upstreamSources;
    unsigned long long _totalUpstreamLatency;
    ABMixer *_upstreamMixer;
    DBLocalEndpoint *_endpoint;
    ABAudioSource *_topUpstreamSource;
    NSTimer *_audioUnitReconnectTimer;
    NSTimer *_applyTopUpstreamSourceTimer;
}

+ (id)isTearedDownError;
+ (void)audioUnitSourceForPort:(id)arg1 sampleRate:(double)arg2 endpoint:(id)arg3 owner:(id)arg4 completion:(CDUnknownBlockType)arg5;
+ (void)initLinkAdapter:(CDStruct_4e53fc95 *)arg1;
+ (void)initialize;
@property(retain, nonatomic) NSTimer *applyTopUpstreamSourceTimer; // @synthesize applyTopUpstreamSourceTimer=_applyTopUpstreamSourceTimer;
@property(retain, nonatomic) NSTimer *audioUnitReconnectTimer; // @synthesize audioUnitReconnectTimer=_audioUnitReconnectTimer;
@property(retain, nonatomic) ABAudioSource *topUpstreamSource; // @synthesize topUpstreamSource=_topUpstreamSource;
@property(retain, nonatomic) DBLocalEndpoint *endpoint; // @synthesize endpoint=_endpoint;
@property(nonatomic) _Bool disableAutomaticRestart; // @synthesize disableAutomaticRestart=_disableAutomaticRestart;
@property(readonly, nonatomic) _Bool audioUnitIsInstantiated; // @synthesize audioUnitIsInstantiated=_audioUnitIsInstantiated;
@property(readonly, nonatomic) _Bool audioUnitIsInitialized; // @synthesize audioUnitIsInitialized=_audioUnitIsInitialized;
@property(nonatomic) _Bool audioUnitFailed; // @synthesize audioUnitFailed=_audioUnitFailed;
@property(readonly, nonatomic) ABMixer *upstreamMixer; // @synthesize upstreamMixer=_upstreamMixer;
@property(nonatomic) unsigned long long totalUpstreamLatency; // @synthesize totalUpstreamLatency=_totalUpstreamLatency;
@property(readonly, nonatomic) struct OpaqueAudioComponentInstance *audioUnit; // @synthesize audioUnit=_audioUnit;
@property(retain, nonatomic) NSArray *upstreamSources; // @synthesize upstreamSources=_upstreamSources;
- (void).cxx_destruct;
- (void)portAUXStateDidChange;
- (void)executeTransferAUXStateToAudioUnit;
- (void)transferAUXStateToAudioUnit;
- (void)fetchAUXStateFromAudioUnit;
- (void)executeUpdatePeerPresence;
- (void)updatePeerPresence;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)unobservePeerPresence;
- (void)observePeerPresence;
- (id)isTearedDownError;
- (void)assertAudioUnitIsNull:(_Bool)arg1;
- (void)assertIsWaitingForPeer:(_Bool)arg1;
- (void)assertAudioUnitIsInstantiated2:(_Bool)arg1;
- (void)assertAudioUnitIsInstantiated1:(_Bool)arg1;
- (void)assertAudioUnitIsInstantiated:(_Bool)arg1;
- (void)assertAudioUnitIsInitialized2:(_Bool)arg1;
- (void)assertAudioUnitIsInitialized1:(_Bool)arg1;
- (void)assertAudioUnitIsInitialized:(_Bool)arg1;
- (unsigned int)minimumJitterBufferLength;
- (CDStruct_1b89fbd9)functionTable;
- (void)respondToAudioUnitError:(CDUnknownBlockType)arg1;
- (void)setWillBeTearedDown:(_Bool)arg1;
- (_Bool)willBeTearedDown;
- (_Bool)isTearedDown;
- (void)tearDown:(CDUnknownBlockType)arg1;
- (void)cleanupAudioUnitWhenNeccessary:(CDUnknownBlockType)arg1;
- (void)waitUntilPeerIsAlive:(CDUnknownBlockType)arg1;
- (void)uninitializeAudioUnit:(CDUnknownBlockType)arg1;
- (void)initializeAudioUnit:(CDUnknownBlockType)arg1;
- (void)uninstantiateAudioUnit:(CDUnknownBlockType)arg1;
- (void)instantiateAudioUnit:(CDUnknownBlockType)arg1;
- (void)callHostingCompletionCallbacks:(id)arg1;
- (void)hostAudioUnit:(CDUnknownBlockType)arg1;
- (void)hostAudioUnit;
- (void)hostAudioUnitFromAudioUnitSourceManager:(CDUnknownBlockType)arg1;
- (void)hostAudioUnitFromInitWithPort;
- (void)hostAudioUnitFromRespondToAudioUnitError;
- (void)hostAudioUnitFromHostAudioUnit;
- (void)setIsBypassed:(_Bool)arg1;
- (_Bool)isBypassed;
- (void)unmuteWithCompletion:(CDUnknownBlockType)arg1;
- (void)muteWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool isReady;
@property(nonatomic) int launchState;
- (void)setOwner:(void *)arg1;
- (void)applyTopUpstreamSource:(id)arg1;
- (void)addUpstreamSource:(id)arg1;
- (void)initUpstreamMixer;
- (void)setSampleRate:(double)arg1;
- (void)unobservePort;
- (void)observePort;
- (void)AVAudioSessionInterruptionEnded;
- (void)applicationWillTerminate:(id)arg1;
- (void)removePropertyListeners;
- (id)description;
- (void)releaseForFurtherUsage;
- (void)dealloc;
- (id)initWithPort:(id)arg1 sampleRate:(double)arg2 endpoint:(id)arg3 doInstantiate:(_Bool)arg4;
- (id)initWithPort:(id)arg1 sampleRate:(double)arg2 endpoint:(id)arg3;

@end

