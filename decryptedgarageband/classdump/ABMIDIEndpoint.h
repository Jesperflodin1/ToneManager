//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class ABAudiobusController, ABConnectionGraphNode, ABPeer, ABPort, NSArray, NSString, NSTimer;

@interface ABMIDIEndpoint : NSObject
{
    unsigned int _MIDIClient;
    unsigned int _outputMIDIPort;
    unsigned int _inputMIDIPort;
    ABAudiobusController *_audiobusController;
    ABPort *_port;
    NSString *_virtualEndpointName;
    _Bool _isAudiobus;
    CDUnknownBlockType _portReceiverBlock;
    ABPeer *_oppositePeer;
    unsigned int _oppositeDestinationEndpoint;
    ABPeer *_controllerPeer;
    CDStruct_efd05b99 _coreMIDIDestinationsA[256];
    CDStruct_efd05b99 _coreMIDIDestinationsB[256];
    CDStruct_efd05b99 *_coreMIDIDestinationsUsed;
    struct OpaqueAudioComponentInstance *_interAppAudioDestinationsA[256];
    struct OpaqueAudioComponentInstance *_interAppAudioDestinationsB[256];
    struct OpaqueAudioComponentInstance **_interAppAudioDestinationsUsed;
    ABConnectionGraphNode *_graphNode;
    _Bool _isDisposed;
    // Error parsing type: {?="buffer"^v"length"i"tail"i"head"i"fillCount"Ai"atomic"B}, name: _MIDIEventBuffer
    double _secondsToHostTime;
    double _sampleRate;
    double _outputLatency;
    struct _opaque_pthread_mutex_t _receiverBlockMutex;
    _Bool _pingIsRunning;
    _Bool _isCoreMIDIEndpoint;
    NSTimer *_MIDIPingTimer;
    _Bool _waitingForPingReply;
    char *_pingPacketBuffer;
    char *_pingReplyPacketBuffer;
    char *_channelMessagePacketBuffer;
    unsigned int _pingPacketNumber;
    struct ABSimpleSysExMessage _pingMessage;
    struct ABSimpleSysExMessage _pingReplyMessage;
    NSArray *_previousSources;
    NSArray *_previousDestinations;
    char *_resetMIDIMessageBuffer;
    struct _opaque_pthread_mutex_t _IAAMIDISendMutex;
    _Bool _pingEnabled;
    unsigned int _ownDestinationEndpoint;
    int _connectionState;
}

@property(nonatomic) int connectionState; // @synthesize connectionState=_connectionState;
@property(readonly, nonatomic) _Bool pingEnabled; // @synthesize pingEnabled=_pingEnabled;
@property(readonly, nonatomic) unsigned int ownDestinationEndpoint; // @synthesize ownDestinationEndpoint=_ownDestinationEndpoint;
@property(readonly, nonatomic) ABPort *port; // @synthesize port=_port;
- (void).cxx_destruct;
- (void)sendResetValuesToMIDIDestinations;
- (void)checkPingReply;
- (void)sendPing;
- (void)pingTimerDidFire;
- (void)resetConnectionState;
- (void)updatePingEnabled;
@property(nonatomic) _Bool isCoreMIDIEndpoint;
- (void)uninitPing;
- (void)startStopPing;
- (void)initPing;
- (void)updateReceiverBlock;
- (void)unobserveReceiverBlock;
- (void)observeReceiverBlock;
- (void)executeUpdateSources;
- (void)updateSources;
- (struct OpaqueAudioComponentInstance *)musicAudioUnitForDestination:(id)arg1;
- (id)audioUnitSourceForDestination:(id)arg1;
- (void)unobserveSources;
- (void)observeSources;
- (void)executeUpdateDestinations;
- (void)updateDestinations;
- (void)swapUsedDestinations;
- (void)unobserveDestinations;
- (void)observeDestinations;
- (void)updateGraphNode;
- (void)unobserveGraphNode;
- (void)observeGraphNode;
- (void)resetUnusedDestinations;
- (void)updateTime;
- (void)uninitTime;
- (void)initTime;
- (void)uninitRoutings;
- (void)initRoutings;
- (void)updatePortConnection;
- (void)unobservePort;
- (void)observePort;
- (void)updateControllerPeer;
- (void)unobserveControllerPeer;
- (void)observeControllerPeer;
- (void)unobserveOppositePeerPresence;
- (void)observeOppositePeerPresence;
@property(nonatomic) unsigned int oppositeDestinationEndpoint;
- (void)updateOppositePeer;
- (void)uninitOppositePeer;
- (void)initOppositePeer;
- (id)createDestinationEndpointMessage;
- (void)disposeOwnDestinationEndpoint;
- (void)createOwnDestinationEndpoint;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dispose;
- (void)dealloc;
- (id)initWithAudiobusController:(id)arg1 port:(id)arg2 MIDIClient:(unsigned int)arg3 MIDIOutputPort:(unsigned int)arg4 MIDIInputPort:(unsigned int)arg5;

@end

