//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "ABAudioSource.h"

@class ABAudioReceiverPort, ABJitterBuffer, ABMixerBuffer, NSArray, NSTimer;

@interface ABMixer : ABAudioSource
{
    struct {
        ABAudioSource *source;
        id associatedObject;
        CDStruct_1b89fbd9 functions;
        _Bool wasIdle;
        float gain;
        float targetGain;
        struct OpaqueAudioConverter *audioConverter;
        struct AudioBufferList *audioConverterBuffer;
        unsigned long long removeTime;
        _Bool removed;
    } _table[30];
    _Bool _midTimeInterval;
    _Bool _priming;
    _Bool _nextPrimingState;
    struct OpaqueAudioConverter *_audioConverter;
    struct AudioBufferList *_audioConverterBuffer;
    struct _opaque_pthread_mutex_t _mutex;
    unsigned long long _lastRenderTime;
    _Bool _isDeallocating;
    _Bool _wasRenderingLevelsWhenEnteringBackground;
    _Bool _receiveMixedAudio;
    double _sourceSampleRate;
    double _latency;
    ABAudioReceiverPort *_owningReceiverPort;
    ABMixerBuffer *_mixerBuffer;
    ABJitterBuffer *_jitterBuffer;
    NSTimer *_cleanupTimer;
    NSTimer *_levelMeteringTimer;
    struct AudioStreamBasicDescription _clientFormat;
}

+ (void)initialize;
@property(retain, nonatomic) NSTimer *levelMeteringTimer; // @synthesize levelMeteringTimer=_levelMeteringTimer;
@property(retain, nonatomic) NSTimer *cleanupTimer; // @synthesize cleanupTimer=_cleanupTimer;
@property(retain, nonatomic) ABJitterBuffer *jitterBuffer; // @synthesize jitterBuffer=_jitterBuffer;
@property(retain, nonatomic) ABMixerBuffer *mixerBuffer; // @synthesize mixerBuffer=_mixerBuffer;
@property(nonatomic) __weak ABAudioReceiverPort *owningReceiverPort; // @synthesize owningReceiverPort=_owningReceiverPort;
@property(readonly, nonatomic) double latency; // @synthesize latency=_latency;
@property(nonatomic) double sourceSampleRate; // @synthesize sourceSampleRate=_sourceSampleRate;
@property(nonatomic) struct AudioStreamBasicDescription clientFormat; // @synthesize clientFormat=_clientFormat;
@property(nonatomic) _Bool receiveMixedAudio; // @synthesize receiveMixedAudio=_receiveMixedAudio;
- (void).cxx_destruct;
- (unsigned int)maximumJitterBufferLength;
- (unsigned int)minimumJitterBufferLength;
- (CDStruct_1b89fbd9)functionTable;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)performLevelMetering;
- (void)cleanup;
- (void)updateJitterBufferSettings;
- (void)updateAudioConverter;
- (void)setSampleRate:(double)arg1;
- (float)panForSource:(id)arg1;
- (void)setPan:(float)arg1 forSource:(id)arg2;
- (float)volumeForSource:(id)arg1;
- (void)setVolume:(float)arg1 forSource:(id)arg2;
- (void)uninitSource:(id)arg1;
@property(readonly, nonatomic) _Bool hasActiveSources; // @dynamic hasActiveSources;
- (void)associateObject:(id)arg1 withSource:(id)arg2;
- (void)addSource:(id)arg1;
@property(retain, nonatomic) NSArray *sources; // @dynamic sources;
- (void)disableLevelMetering;
- (void)enableLevelMetering;
- (id)description;
- (void)setClientFormat:(struct AudioStreamBasicDescription)arg1 andSourceSampleRate:(double)arg2;
- (void)dealloc;
- (id)initWithClientFormat:(struct AudioStreamBasicDescription)arg1 sourceSampleRate:(double)arg2;

@end

