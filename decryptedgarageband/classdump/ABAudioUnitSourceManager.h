//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class ABAudioUnitSourceReservationRequest, NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSTimer;

@interface ABAudioUnitSourceManager : NSObject
{
    NSMutableArray *_sources;
    NSMutableSet *_runningSources;
    NSMutableSet *_nonRunningSources;
    struct __CFArray *_nonRunningSourcesCArray;
    struct _opaque_pthread_mutex_t _nonRunningSourcesCArrayMutex;
    NSMutableArray *_reservationRequests;
    NSMutableArray *_pendingLaunchRequests;
    ABAudioUnitSourceReservationRequest *_launchRequestCurrentlyInstantiated;
    NSMutableArray *_launchRequestsInProgress;
    NSTimer *_processReservationsTimer;
    NSTimer *_cleanupSourcesTimer;
    NSTimer *_launchSourcesTimer;
    unsigned long long _cleanUpInProgress;
    long long _cleanupStopped;
    NSMutableArray *_releaseRequests;
    NSMutableArray *_cleanupCallbacks;
    NSMutableSet *_delegates;
    _Bool _terminateApps;
    NSMutableSet *_launchingSources;
    NSMutableArray *_missingReleaseRequests;
    _Bool _isCurrentlyTearingDownASource;
    NSMutableSet *_sourcesNeedToGetUnPresent;
    _Bool _AVAudioSessionIsInterrupted;
    NSMutableDictionary *_startDatesForSources;
    NSMutableSet *_sourcesScheduledForStart;
    _Bool _tearDownSourcesWithoutDelay;
    _Bool _isRunningInAudiobus;
}

+ (id)defaultManager;
@property(nonatomic) _Bool isRunningInAudiobus; // @synthesize isRunningInAudiobus=_isRunningInAudiobus;
@property(nonatomic) _Bool tearDownSourcesWithoutDelay; // @synthesize tearDownSourcesWithoutDelay=_tearDownSourcesWithoutDelay;
@property(readonly, nonatomic) NSArray *sources; // @synthesize sources=_sources;
- (void).cxx_destruct;
- (void)fetchAUXStatesFromAudioUnits;
- (void)transferAudioUnitStatesToPorts;
- (void)AVAudioSessionRouteDidChange;
- (void)unobserveAVAudioSessionRouteChange;
- (void)observeAVAudioSessionRouteChange;
- (void)sendOutReactivationNotification;
- (void)didFinishInterruptAVAudioSession;
- (void)executeTryReactivateAudioSession;
- (void)tryReactivateAudioSession;
- (void)didInterruptAVAudioSession;
- (void)unobserveAVAudioSessionInterruption;
- (void)observeAVAudioSessionInterruption;
- (void)checkNeedsLaunch:(id)arg1;
- (void)checkConsistency;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1;
- (id)delegateValueFor:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)unobserveSource:(id)arg1;
- (void)observeSource:(id)arg1;
- (void)peerPresenceDidChange:(id)arg1;
- (void)peer:(id)arg1 didReportIAAError:(unsigned char)arg2;
- (_Bool)shouldManuallyLaunchPort:(id)arg1;
- (void)updateNonReadySourcesCArray;
- (void)sourceHasBeenTearedDown:(id)arg1;
- (void)sourceWillBeTearedDown:(id)arg1;
- (void)launchStateDidChange:(id)arg1;
- (void)readyStateDidChange:(id)arg1;
- (_Bool)isSourceForPortReady:(id)arg1;
- (void)cleanup:(CDUnknownBlockType)arg1;
- (void)stopCleanup;
- (void)startCleanup;
- (void)cleanupSources;
- (void)finalizeCleanup;
- (void)processReservations;
- (void)resetTimeoutForReservationRequestsOfSource:(id)arg1;
- (void)resetTimeoutForReleaseRequestsOfSource:(id)arg1;
- (id)sourceForPort:(id)arg1 owner:(id)arg2;
- (id)reservationRequestFor:(id)arg1 owner:(id)arg2;
- (void)removeSourceFromMissingReleaseRequests:(id)arg1 owner:(id)arg2;
- (void)removeSourceFromReservationRequests:(id)arg1;
- (void)removeSourceFromReservationRequests:(id)arg1 owner:(id)arg2;
- (void)removeSourceFromReleasRequests:(id)arg1;
- (_Bool)sourceIsAboutToBeReleased:(id)arg1;
- (void)releaseAudioSource:(id)arg1 owner:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)willReleaseOwner:(id)arg1;
- (double)durationAfterSourceIsDeleted:(id)arg1;
- (void)startAudioSource:(id)arg1;
- (void)audioUnitSourceForPort:(id)arg1 sampleRate:(double)arg2 endpoint:(id)arg3 owner:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)updateSettings;
- (void)unobserveSettings;
- (void)observeSettings;
- (void)applicationWillEnterForeground;
- (void)applicationWillTerminate;
- (id)siblingsThatNeedToBeReleasedBeforePortIsInstantiated:(id)arg1;
- (_Bool)portHasSiblingsThatNeedToBeReleasedFirst:(id)arg1;
- (_Bool)isOnlyActiveSourceOfPeer:(id)arg1;
- (_Bool)sourceHasOwner:(id)arg1;
- (id)sourcesForPeer:(id)arg1;
- (id)interAppAudioSiblingSourceForPort:(id)arg1;
- (id)sourceForPort:(id)arg1;
- (void)dealloc;
- (id)init;

@end

