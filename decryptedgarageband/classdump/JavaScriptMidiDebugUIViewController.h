//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "JavaScriptMidiEditorProtocol-Protocol.h"

@class NSString, UIButton, UISegmentedControl, UITextView, UIView;

@interface JavaScriptMidiDebugUIViewController : UIViewController <JavaScriptMidiEditorProtocol>
{
    // Error parsing type: ^{CMidiJavaScriptShell=^^?^^?^^?^^?^^?BB^v^v^v{vector<CPlugInUserCommunicator *, std::__1::allocator<CPlugInUserCommunicator *> >=^^{CPlugInUserCommunicator}^^{CPlugInUserCommunicator}{__compressed_pair<CPlugInUserCommunicator **, std::__1::allocator<CPlugInUserCommunicator *> >=^^{CPlugInUserCommunicator}}}{map<long long, const void *, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, const void *> > >={__tree<std::__1::__value_type<long long, const void *>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, const void *>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, const void *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, const void *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, const void *>, std::__1::less<long long>, true> >=Q}}}BB^qB^qB^qB^qB^qB^^?{CAddRemoveIterateList=^{SEntry}^{SEntry}^{SEntry}i}B^{__CFArray}^^{CCTRLController}if^{CHost}^{CBasicFX}qBBqqq^{TAudioIOConfig}qq[32q]qq[32q]****iqqBBBii^?^vqfqqqqqBBqfffBB{CObjPtrList<CCTRLController>=^^?^^{CCTRLController}^^{CCTRLController}{__compressed_pair<CCTRLController **, std::__1::allocator<CCTRLController *> >=^^{CCTRLController}}}{CObjPtrList<CDEPDependency>=^^?^^{CDEPDependency}^^{CDEPDependency}{__compressed_pair<CDEPDependency **, std::__1::allocator<CDEPDependency *> >=^^{CDEPDependency}}}BBBqiqBBq{vector<EPlugInID, std::__1::allocator<EPlugInID> >=^i^i{__compressed_pair<EPlugInID *, std::__1::allocator<EPlugInID> >=^i}}fB[16i][16i]{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}[128f]{map<int, const __CFDictionary *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, const __CFDictionary *> > >={__tree<std::__1::__value_type<int, const __CFDictionary *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, const __CFDictionary *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, const __CFDictionary *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, const __CFDictionary *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, const __CFDictionary *>, std::__1::less<int>, true> >=Q}}}^{CDEPMIDICtrlLearn}^{CDEPFaderEventLearn}^{CMidiProcessor}^{CQueue}qd{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}{map<int, CCTRLMIDICtrlSelect *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CCTRLMIDICtrlSelect *> > >={__tree<std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CCTRLMIDICtrlSelect *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, std::__1::less<int>, true> >=Q}}}i^{CMusicalContext}{vector<CDEPDependency *, std::__1::allocator<CDEPDependency *> >=^^{CDEPDependency}^^{CDEPDependency}{__compressed_pair<CDEPDependency **, std::__1::allocator<CDEPDependency *> >=^^{CDEPDependency}}}{atomic<bool>=AB}@^{_MARealtimeLogger}{map<std::__1::basic_string<char>, ControllerData, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, ControllerData> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, ControllerData> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}i^{__CFString}^{__CFString}^{__CFString}*iiBB{vector<CMidiNote, std::__1::allocator<CMidiNote> >=^{CMidiNote}^{CMidiNote}{__compressed_pair<CMidiNote *, std::__1::allocator<CMidiNote> >=^{CMidiNote}}}}, name: shell
    UIView *_lowerContainerView;
    UISegmentedControl *_segmentedControl;
    UITextView *_consoleView;
    UITextView *_scripterView;
    UIButton *_runButton;
}

@property(retain, nonatomic) UIButton *runButton; // @synthesize runButton=_runButton;
@property(retain, nonatomic) UITextView *scripterView; // @synthesize scripterView=_scripterView;
@property(retain, nonatomic) UITextView *consoleView; // @synthesize consoleView=_consoleView;
@property(retain, nonatomic) UISegmentedControl *segmentedControl; // @synthesize segmentedControl=_segmentedControl;
@property(retain, nonatomic) UIView *lowerContainerView; // @synthesize lowerContainerView=_lowerContainerView;
- (void)_highlightAllLinesWithColor:(id)arg1;
- (void)_highlightLine:(unsigned long long)arg1 withColor:(id)arg2;
- (void)runScriptAndClearConsole;
- (void)runScript:(id)arg1;
- (void)clearConsoleText;
- (void)appendConsoleText:(id)arg1;
-     // Error parsing type: v24@0:8^{CMidiJavaScriptShell=^^?^^?^^?^^?^^?BB^v^v^v{vector<CPlugInUserCommunicator *, std::__1::allocator<CPlugInUserCommunicator *> >=^^{CPlugInUserCommunicator}^^{CPlugInUserCommunicator}{__compressed_pair<CPlugInUserCommunicator **, std::__1::allocator<CPlugInUserCommunicator *> >=^^{CPlugInUserCommunicator}}}{map<long long, const void *, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, const void *> > >={__tree<std::__1::__value_type<long long, const void *>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, const void *>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, const void *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, const void *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, const void *>, std::__1::less<long long>, true> >=Q}}}BB^qB^qB^qB^qB^qB^^?{CAddRemoveIterateList=^{SEntry}^{SEntry}^{SEntry}i}B^{__CFArray}^^{CCTRLController}if^{CHost}^{CBasicFX}qBBqqq^{TAudioIOConfig}qq[32q]qq[32q]****iqqBBBii^?^vqfqqqqqBBqfffBB{CObjPtrList<CCTRLController>=^^?^^{CCTRLController}^^{CCTRLController}{__compressed_pair<CCTRLController **, std::__1::allocator<CCTRLController *> >=^^{CCTRLController}}}{CObjPtrList<CDEPDependency>=^^?^^{CDEPDependency}^^{CDEPDependency}{__compressed_pair<CDEPDependency **, std::__1::allocator<CDEPDependency *> >=^^{CDEPDependency}}}BBBqiqBBq{vector<EPlugInID, std::__1::allocator<EPlugInID> >=^i^i{__compressed_pair<EPlugInID *, std::__1::allocator<EPlugInID> >=^i}}fB[16i][16i]{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}[128f]{map<int, const __CFDictionary *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, const __CFDictionary *> > >={__tree<std::__1::__value_type<int, const __CFDictionary *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, const __CFDictionary *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, const __CFDictionary *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, const __CFDictionary *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, const __CFDictionary *>, std::__1::less<int>, true> >=Q}}}^{CDEPMIDICtrlLearn}^{CDEPFaderEventLearn}^{CMidiProcessor}^{CQueue}qd{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}{CQueue=^^?{vector<SQueueEvent, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}^{SQueueEvent}{__compressed_pair<SQueueEvent *, std::__1::allocator<SQueueEvent> >=^{SQueueEvent}}}qq}{map<int, CCTRLMIDICtrlSelect *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CCTRLMIDICtrlSelect *> > >={__tree<std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CCTRLMIDICtrlSelect *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CCTRLMIDICtrlSelect *>, std::__1::less<int>, true> >=Q}}}i^{CMusicalContext}{vector<CDEPDependency *, std::__1::allocator<CDEPDependency *> >=^^{CDEPDependency}^^{CDEPDependency}{__compressed_pair<CDEPDependency **, std::__1::allocator<CDEPDependency *> >=^^{CDEPDependency}}}{atomic<bool>=AB}@^{_MARealtimeLogger}{map<std::__1::basic_string<char>, ControllerData, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, ControllerData> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, ControllerData> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, ControllerData>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}i^{__CFString}^{__CFString}^{__CFString}*iiBB{vector<CMidiNote, std::__1::allocator<CMidiNote> >=^{CMidiNote}^{CMidiNote}{__compressed_pair<CMidiNote *, std::__1::allocator<CMidiNote> >=^{CMidiNote}}}}16, name: setShell:
- (void)setErrorLine:(unsigned long long)arg1;
- (void)scriptFinishedLoading;
- (id)getScriptString;
- (void)setScriptString:(id)arg1;
- (void)changeSegment:(id)arg1;
- (void)loadView;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

