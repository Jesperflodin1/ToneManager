//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class ABFloatConverter, NSTimer;

@interface ABMixerBuffer : NSObject
{
    struct AudioStreamBasicDescription _clientFormat;
    struct AudioStreamBasicDescription _mixerOutputFormat;
    // Error parsing type: [30{?="source"^v"peekCallback"^?"renderCallback"^?"callbackUserinfo"^v"buffer"{?="buffer"^v"length"i"tail"i"head"i"fillCount"Ai"atomic"B}"lastAudioTimestamp"Q"synced"B"consumedFramesInCurrentTimeSlice"I"audioDescription"{AudioStreamBasicDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}"floatConverter"^v"volume"f"pan"f"started"B"skipFadeBuffer"^{AudioBufferList}"unregistering"B}], name: _table
    struct AudioTimeStamp _currentSliceTimestamp;
    unsigned int _sampleTime;
    unsigned int _currentSliceFrameCount;
    struct OpaqueAUGraph *_graph;
    int _mixerNode;
    struct OpaqueAudioComponentInstance *_mixerUnit;
    struct _opaque_pthread_mutex_t _graphMutex;
    struct OpaqueAudioConverter *_audioConverter;
    // Error parsing type: {?="buffer"^v"length"i"tail"i"head"i"fillCount"Ai"atomic"B}, name: _audioConverterBuffer
    _Bool _audioConverterHasBuffer;
    char *_scratchBuffer;
    _Bool _graphReady;
    _Bool _automaticSingleSourceDequeueing;
    // Error parsing type: {?="buffer"^v"length"i"tail"i"head"i"fillCount"Ai"atomic"B}, name: _mainThreadActionBuffer
    NSTimer *_mainThreadActionPollTimer;
    float **_microfadeBuffer;
    int _configuredChannels;
    _Bool _assumeInfiniteSources;
    _Bool _levelMonitoringRequired;
    int _debugLevel;
    double _sourceIdleThreshold;
    ABFloatConverter *_floatConverter;
}

@property(nonatomic) _Bool levelMonitoringRequired; // @synthesize levelMonitoringRequired=_levelMonitoringRequired;
@property(nonatomic) struct AudioStreamBasicDescription clientFormat; // @synthesize clientFormat=_clientFormat;
@property(nonatomic) int debugLevel; // @synthesize debugLevel=_debugLevel;
@property(retain, nonatomic) ABFloatConverter *floatConverter; // @synthesize floatConverter=_floatConverter;
@property(nonatomic) _Bool assumeInfiniteSources; // @synthesize assumeInfiniteSources=_assumeInfiniteSources;
@property(nonatomic) double sourceIdleThreshold; // @synthesize sourceIdleThreshold=_sourceIdleThreshold;
- (void).cxx_destruct;
- (void)respondToChannelCountChange;
- (void)pollActionBuffer;
- (void)createMixingGraph;
- (void)refreshMixingGraph;
- (void)unregisterSource:(void *)arg1;
- (void)getPowerLevelForSource:(void *)arg1 average:(double *)arg2 peak:(double *)arg3;
- (float)panForSource:(void *)arg1;
- (void)setPan:(float)arg1 forSource:(void *)arg2;
- (float)volumeForSource:(void *)arg1;
- (void)setVolume:(float)arg1 forSource:(void *)arg2;
- (void)setAudioDescription:(struct AudioStreamBasicDescription)arg1 forSource:(void *)arg2;
- (void)setRenderCallback:(CDUnknownFunctionPointerType)arg1 peekCallback:(CDUnknownFunctionPointerType)arg2 userInfo:(void *)arg3 forSource:(void *)arg4;
- (void)dealloc;
- (id)initWithClientFormat:(struct AudioStreamBasicDescription)arg1;

@end

