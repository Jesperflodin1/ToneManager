//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "LgTronSequence.h"

@interface LgMidiSequence : LgTronSequence
{
    // Error parsing type: {MATronDriveSequenceMIDI="_vptr$MATronDriveSequence"^^?"_scheduleTime"Q"_collectionTime"Q"_parentSequence"^{MATronDriveSequence}"_nextSequence"^{MATronDriveSequence}"_parentStream"^{MSuperStream}"_stopGroup"{atomic<MATronDriveAlignedGroup *>="__a_"A^{MATronDriveAlignedGroup}}"_playGroup"{atomic<MATronDriveAlignedGroup *>="__a_"A^{MATronDriveAlignedGroup}}"_state"i"_sequenceID"i"_sequenceNumber"i"_callback"@?"_callbackAtClock"q"_endAtClock"q"_sequenceDelay"q"_processDelay"q"_transferSamplePosition"q"_recordingDelay"q"_recordingClock"q"_recordingOffset"q"_recordingInfo"{?="clockOfClipStart"q"clockOfClipEnd"q"clockDelay"q"clipID"i"transpose"d"fReverse"B"speed"f"volumeOffset"f"clipOffset"q"clipLength"q"fLooping"B"eventSource"i}"_loopState"{LoopState="when"q"samplePosition"q"index"q"scaledIndex"q"count"q"start"q"length"q"clock"q"scaledStart"q"scaledLength"q"scaledClock"q"samplesPerClock"d"scaledSamplesPerClock"d"speed"f"_elapsed"q"_limit"q"_limited"B}"_repeatState"{LoopState="when"q"samplePosition"q"index"q"scaledIndex"q"count"q"start"q"length"q"clock"q"scaledStart"q"scaledLength"q"scaledClock"q"samplesPerClock"d"scaledSamplesPerClock"d"speed"f"_elapsed"q"_limit"q"_limited"B}"_nextRepeatState"{LoopState="when"q"samplePosition"q"index"q"scaledIndex"q"count"q"start"q"length"q"clock"q"scaledStart"q"scaledLength"q"scaledClock"q"samplesPerClock"d"scaledSamplesPerClock"d"speed"f"_elapsed"q"_limit"q"_limited"B}"_currentLoop"^{LoopState}"_nextLoop"^{LoopState}"_transpose"d"_sequenceTranspose"d"_speed"f"_sequenceSpeed"f"_sequenceSpeedShift"i"_sequenceTempo"f"_loopProgress"f"_volume"{Volume="offset"f"audioGain"f"velocityOffset"c}"_sequenceVolume"{Volume="offset"f"audioGain"f"velocityOffset"c}"_sequenceStart"q"_sequenceLength"q"_retriggerLength"q"_loopLimit"q"_repeatAnchor"q"_propertyClock"q"_attached"B"_reset"B"_reschedule"B"_repeating"B"_clipReversed"B"_regionReversed"B"_sequenceReversed"B"_followsTempo"B"_sequenceFollowsTempo"B"_muted"B"_sequenceMuted"B"_ignoresTranspose"B"_playFromRelativePosition"B"_eventListener"@?"_eventFilter"@?"_currentScheduler"^{MIDIEventScheduler}"_nextScheduler"^{MIDIEventScheduler}"_currentEventList"^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}"_nextEventList"^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}"_nextEvent"^{MATronDriveEvent}"_loopScheduler"{MIDIEventScheduler="_sequence"^{MATronDriveSequenceMIDI}"_state"^{LoopState}"_name"*"_loopStart64"q"_loopLength64"q"_loopLimit64"q"_loopDelay64"q"_eventClock64"q"_events"^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}"_startEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_nextEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_lateNotes"^{MATronDriveEvent}"_overflowNotes"^{MATronDriveEvent}}"_reversedScheduler"{MIDIEventScheduler="_sequence"^{MATronDriveSequenceMIDI}"_state"^{LoopState}"_name"*"_loopStart64"q"_loopLength64"q"_loopLimit64"q"_loopDelay64"q"_eventClock64"q"_events"^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}"_startEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_nextEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_lateNotes"^{MATronDriveEvent}"_overflowNotes"^{MATronDriveEvent}}"_retriggerScheduler"{MIDIEventScheduler="_sequence"^{MATronDriveSequenceMIDI}"_state"^{LoopState}"_name"*"_loopStart64"q"_loopLength64"q"_loopLimit64"q"_loopDelay64"q"_eventClock64"q"_events"^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}"_startEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_nextEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_lateNotes"^{MATronDriveEvent}"_overflowNotes"^{MATronDriveEvent}}"_repeatScheduler"{MIDIEventScheduler="_sequence"^{MATronDriveSequenceMIDI}"_state"^{LoopState}"_name"*"_loopStart64"q"_loopLength64"q"_loopLimit64"q"_loopDelay64"q"_eventClock64"q"_events"^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}"_startEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_nextEvent"{__wrap_iter<MATronDriveEvent *>="__i"^{MATronDriveEvent}}"_lateNotes"^{MATronDriveEvent}"_overflowNotes"^{MATronDriveEvent}}"_keyRange"{_NSRange="location"Q"length"Q}"_sequenceRetriggerLength"q"_sequenceRepeating"B}, name: _midiSequence
    vector_79368cc7 _loopEvents[2];
    vector_79368cc7 _reversedEvents[2];
    _Bool _hasRepeats;
    short _swing;
    vector_79368cc7 *_eventList;
}

@property(nonatomic) short swing; // @synthesize swing=_swing;
@property(readonly) vector_79368cc7 *eventList; // @synthesize eventList=_eventList;
- (id).cxx_construct;
- (void).cxx_destruct;
- (_Bool)repeatSequence:(unsigned int)arg1 offset:(long long)arg2 at:(long long)arg3;
- (_Bool)reverseSequence:(long long)arg1;
- (_Bool)loadMidiRegions:(struct CRegions *)arg1 error:(id *)arg2;
- (_Bool)loadMidiEvents:(const struct _LgClipMidiEvent *)arg1 eventCount:(unsigned int)arg2 clipLength:(long long)arg3 eventAttributes:(id)arg4;
// Error parsing type for property midiSequence:
// Property attributes: T^{MATronDriveSequenceMIDI=^^?QQ^{MATronDriveSequence}^{MATronDriveSequence}^{MSuperStream}{atomic<MATronDriveAlignedGroup *>=A^{MATronDriveAlignedGroup}}{atomic<MATronDriveAlignedGroup *>=A^{MATronDriveAlignedGroup}}iii@?qqqqqqqq{?=qqqidBffqqBi}{LoopState=qqqqqqqqqqqddfqqB}{LoopState=qqqqqqqqqqqddfqqB}{LoopState=qqqqqqqqqqqddfqqB}^{LoopState}^{LoopState}ddffiff{Volume=ffc}{Volume=ffc}qqqqqqBBBBBBBBBBBBB@?@?^{MIDIEventScheduler}^{MIDIEventScheduler}^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}^{MATronDriveEvent}{MIDIEventScheduler=^{MATronDriveSequenceMIDI}^{LoopState}*qqqqq^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}^{MATronDriveEvent}^{MATronDriveEvent}}{MIDIEventScheduler=^{MATronDriveSequenceMIDI}^{LoopState}*qqqqq^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}^{MATronDriveEvent}^{MATronDriveEvent}}{MIDIEventScheduler=^{MATronDriveSequenceMIDI}^{LoopState}*qqqqq^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}^{MATronDriveEvent}^{MATronDriveEvent}}{MIDIEventScheduler=^{MATronDriveSequenceMIDI}^{LoopState}*qqqqq^{vector<MATronDriveEvent, std::__1::allocator<MATronDriveEvent> >}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}{__wrap_iter<MATronDriveEvent *>=^{MATronDriveEvent}}^{MATronDriveEvent}^{MATronDriveEvent}}{_NSRange=QQ}qB},R

- (void)updateKeyRange:(struct CClip *)arg1;
- (id)initWithSong:(struct CSong *)arg1 clip:(struct CClip *)arg2 error:(id *)arg3;

@end

