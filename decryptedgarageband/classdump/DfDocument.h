//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 30 2018 09:46:22).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "CbNSDocumentReplacement.h"

@class DfBasicArrangeModel, DfBasicClipsModel, DfGenInstModel, DfLogicModel, NSArray, NSDate, NSMutableDictionary, NSString, UIImage;
@protocol DfLogicModelDelegate;

@interface DfDocument : CbNSDocumentReplacement
{
    DfLogicModel *m_logicModel;
    DfBasicArrangeModel *m_arrangeModel;
    DfGenInstModel *m_genInstModel;
    DfBasicClipsModel *m_clipsModel;
    id <DfLogicModelDelegate> m_logicModelDelegate;
    _Bool m_shouldPostNotifications;
    _Bool m_shouldPostModelUpdateNotifications;
    NSString *m_preListenAudioFile;
    long long m_lastTempo;
    int m_virtualCountInTempo;
    _Bool m_isVirtualCountInRunning;
    int m_virtualCountInCancelReason;
    _Bool m_importAsAppleLoop;
    _Bool m_saveAsArchive;
    _Bool m_compressFiles;
    _Bool m_forcePreview;
    _Bool m_preventUndo;
    NSMutableDictionary *m_poolOfChannelFlyweights;
    NSMutableDictionary *m_poolOfPlugInFlyweights;
    int m_dfDocumentVersion;
    int m_cbDocumentVersion;
    NSString *m_documentSystemString;
    NSString *m_documentMachineString;
    NSString *m_documentAppIDString;
    NSString *m_documentCreatedInAppIDString;
    NSArray *m_missingContentPacksAfterLoadingSong;
    _Bool m_anyContentFileWasMissingDuringSongLoading;
    NSArray *m_tunerStrings;
    NSString *m_lastImportOriginalPath;
    long long m_SPL_BufferedClock;
    long long m_lastPlayStartClock;
    long long m_mainFolderEndClockBeforeLastRecordStart;
    long long m_CellRecordingSPL_BufferedClock;
    _Bool m_previewDirty;
    _Bool m_supressProgressOnLoad;
    UIImage *m_songScreenShotForNextSavingAction;
    _Bool m_isFreezing;
    _Bool m_ignoreIdleTimerNotifications;
    NSDate *m_lastSaveDate;
    _Bool m_closeCalled;
    _Bool m_lastSaveFailed;
    _Bool m_allowOpeningOlderSongVersionsWithProblems;
    _Bool m_syncedTransportModeEnabled;
    _Bool m_isPrimedForSyncedTransportMode;
    _Bool m_userInteractionDisabled;
    _Bool m_reenableCycleAfterSyncedTransportModeStart;
    _Bool m_syncedPlayCountInEnabled;
    long long m_OpenUndoGroups;
    long long m_GroupedUndoStepCounter;
    long long m_IsUndoingCounter;
    _Bool m_SongWasOriginallyImportedFromMacOS;
    NSString *m_ImportedFromMacOSSourceAppBundleID;
    _Bool _gridPerformanceRecordingModeEnabled;
}

+ (_Bool)copySamplerAudioFilesToSongSampleFilesFolderIfNeededForEXSInstrumentAtPath:(id)arg1 songPath:(id)arg2;
+ (void)triggerCurrentRunLoopWithIgnoredIdleCalls:(_Bool)arg1 forProgressController:(id)arg2;
+ (void)triggerCurrentRunLoopWithIgnoredIdleCalls:(_Bool)arg1;
+ (_Bool)globalIgnoreIdleTimerNotifications;
+ (void)endGlobalIgnoreIdleTimerNotifications;
+ (void)beginGlobalIgnoreIdleTimerNotifications;
+ (Class)songConfiguratorClass;
+ (void)initialize;
+ (void)setSongConfiguratorClass:(Class)arg1;
+ (Class)arrangeModelClass;
+ (void)setArrangeModelClass:(Class)arg1;
+ (long long)getChannelStripInfo:(int)arg1 forData:(id)arg2;
+ (id)extractLogicExportedSongInfoPLISTFromSongBundleAtPath:(id)arg1;
+ (_Bool)songBundleContainsLogicExportedSongInfoPLISTAtPath:(id)arg1;
+ (_Bool)songBundleIsLogicExportedSongWithoutProperiOSBandSongAtPath:(id)arg1;
+ (id)createNewGBDocumentAtURL:(id)arg1 fromTemplateAtURL:(id)arg2 songSettings:(CDStruct_2e0d3620 *)arg3 saveNewDocument:(_Bool)arg4 error:(id *)arg5;
+ (id)createEmptyNewGBDocumentAtURL:(id)arg1 songSettings:(CDStruct_2e0d3620 *)arg2 saveNewDocument:(_Bool)arg3 error:(id *)arg4;
+ (id)defaultExtensionAndType;
+ (_Bool)createOrValidateDocumentSkelettonBundleAtURL:(id)arg1 ofType:(id)arg2;
+ (_Bool)makeSureDocumentHasValidNoSyncStructureAtURL:(id)arg1;
+ (void)_writePackageInfoToProjectPath:(id)arg1 ofType:(id)arg2;
+ (id)_hiddenTemporaryDirectoryForPath:(id)arg1 create:(_Bool)arg2;
+ (id)currentDocumentCachesUUIDForDocumentAtPath:(id)arg1;
+ (id)updateDocumentCachesUUIDsForDocumentAtPath:(id)arg1;
+ (long long)checkExternalSamplerFilesReferencesForDocumentAtPath:(id)arg1;
+ (id)getReferencedContentPacksForSongAtPath:(id)arg1;
+ (id)_getReferencedContentPacksForAssetsMetaDataPlist:(id)arg1;
+ (id)_getExistingFullLibraryBundlePathFromPathWithContentAnchorIfPossible:(id)arg1;
+ (int)checkSongVersionForSongAtURL:(id)arg1;
+ (int)checkSongVersionForSongAtPath:(id)arg1;
+ (void)setSavesAssetsMetaDataPlistIntoSongs:(_Bool)arg1;
+ (int)checkDocumentVersion:(int)arg1 currentRunningVersion:(int)arg2;
+ (void)setMidiPacketFilter:(CDUnknownBlockType)arg1;
+ (void)setAllowedMaxClock:(long long)arg1;
@property(nonatomic) _Bool gridPerformanceRecordingModeEnabled; // @synthesize gridPerformanceRecordingModeEnabled=_gridPerformanceRecordingModeEnabled;
@property(nonatomic) _Bool syncedPlayCountInEnabled; // @synthesize syncedPlayCountInEnabled=m_syncedPlayCountInEnabled;
@property(readonly, nonatomic) _Bool reenableCycleAfterSyncedTransportModeStart; // @synthesize reenableCycleAfterSyncedTransportModeStart=m_reenableCycleAfterSyncedTransportModeStart;
@property(readonly, nonatomic) _Bool isPrimedForSyncedTransportMode; // @synthesize isPrimedForSyncedTransportMode=m_isPrimedForSyncedTransportMode;
@property(nonatomic) _Bool syncedTransportModeEnabled; // @synthesize syncedTransportModeEnabled=m_syncedTransportModeEnabled;
@property(readonly, nonatomic) long long mainFolderEndClockBeforeLastRecordStart; // @synthesize mainFolderEndClockBeforeLastRecordStart=m_mainFolderEndClockBeforeLastRecordStart;
@property(readonly, nonatomic) _Bool lastSaveFailed; // @synthesize lastSaveFailed=m_lastSaveFailed;
@property(readonly, nonatomic) NSDate *lastSaveDate; // @synthesize lastSaveDate=m_lastSaveDate;
@property(getter=isPreviewDirty) _Bool previewDirty; // @synthesize previewDirty=m_previewDirty;
@property(nonatomic) _Bool ignoreIdleTimerNotifications; // @synthesize ignoreIdleTimerNotifications=m_ignoreIdleTimerNotifications;
@property(nonatomic) _Bool preventUndo; // @synthesize preventUndo=m_preventUndo;
@property(nonatomic) _Bool shouldPostModelUpdateNotifications; // @synthesize shouldPostModelUpdateNotifications=m_shouldPostModelUpdateNotifications;
@property(nonatomic) _Bool shouldPostNotifications; // @synthesize shouldPostNotifications=m_shouldPostNotifications;
@property(readonly, nonatomic) DfBasicClipsModel *clipsModel; // @synthesize clipsModel=m_clipsModel;
@property(readonly, nonatomic) DfBasicArrangeModel *arrangeModel; // @synthesize arrangeModel=m_arrangeModel;
@property(readonly, nonatomic) DfLogicModel *logicModel; // @synthesize logicModel=m_logicModel;
@property(readonly, nonatomic) NSString *documentCreatedInAppIDString; // @synthesize documentCreatedInAppIDString=m_documentCreatedInAppIDString;
@property(readonly, nonatomic) NSString *documentAppIDString; // @synthesize documentAppIDString=m_documentAppIDString;
@property(readonly, nonatomic) NSString *documentMachineString; // @synthesize documentMachineString=m_documentMachineString;
@property(readonly, nonatomic) NSString *documentSystemString; // @synthesize documentSystemString=m_documentSystemString;
- (void).cxx_destruct;
- (id)songSamplerInstrumentsPath:(_Bool)arg1;
- (id)songSamplerFilesPath:(_Bool)arg1;
- (id)createEasySamplerInstrumentWithName:(id)arg1 forAudioFileAtPath:(id)arg2 ginstIndex:(int)arg3;
- (void)traceLogicAudioFiles;
- (_Bool)isRedoMenuItemEnabled;
- (_Bool)isUndoMenuItemEnabled;
- (void)makeWindowControllers;
- (void)documentIdleCallHandler:(id)arg1;
- (void)documentPlugInNumVoicesChangedHandler:(id)arg1;
- (void)documentMetronomeModeChangedHandler:(id)arg1;
- (void)documentCountInModeChangedHandler:(id)arg1;
- (_Bool)has24BitAudioFiles;
- (void)setSupressProgressOnLoad:(_Bool)arg1;
- (_Bool)supressProgressOnLoad;
- (void)setForcePreview:(_Bool)arg1;
- (_Bool)forcePreview;
- (id)importOriginalPath;
- (void)setImportOriginalPath:(id)arg1;
- (id)imageFullPath;
- (void)setMovieFullPath:(id)arg1;
- (id)movieFullPath;
- (_Bool)hasMovie;
- (id)movieFullPathBackup;
- (void)setMovieFullPathBackup:(id)arg1;
- (double)songEndTime;
- (_Bool)isDirty;
- (void)clearDirtyFlag;
- (void)setDirty;
- (void)setInitialSongSettings;
- (void)setImportAsAppleLoop:(_Bool)arg1;
- (_Bool)importAsAppleLoop;
- (_Bool)willPostNotifications;
- (_Bool)activateDocument;
- (struct LGDOCUMENT *)logicDocument;
- (id)logicModelDelegate;
- (void)setLogicModelDelegate:(id)arg1;
- (void)_setLogicModel:(id)arg1 closeLogicDocIfNeeded:(_Bool)arg2;
- (void)_setClipsModel:(id)arg1;
@property(readonly, nonatomic) DfGenInstModel *genInstModel;
- (void)_setArrangeModel:(id)arg1;
- (int)loadedCbDocumentVersion;
- (int)loadedDfDocumentVersion;
- (void)postDocumentNotificationIfEnabledWithName:(id)arg1;
- (void)postDocumentNotificationIfEnabledWithName:(id)arg1 userInfo:(id)arg2;
- (void)_addObjCUndoStepWithName:(id)arg1;
- (void)close;
- (void)dealloc;
- (_Bool)newDocumentCreated:(_Bool)arg1;
- (_Bool)newDocumentCreated;
- (id)init;
- (_Bool)exportChannelSettingOfChannel:(id)arg1 asPatchToURL:(id)arg2;
- (_Bool)importPatchFromURL:(id)arg1 toChannel:(id)arg2 withCategoryName:(id)arg3;
- (_Bool)isHalfSapleRateForInstID:(int)arg1;
- (unsigned char)setHalfSampleRate:(_Bool)arg1 forInstID:(int)arg2;
- (unsigned char)setChannelStripName:(int)arg1:(id)arg2;
- (unsigned char)setChannelStripCategory:(int)arg1:(id)arg2;
- (id)getChannelStripDictionaryFromCstData:(id)arg1;
- (long long)getChannelStripInfo:(int)arg1 forData:(id)arg2;
- (int)getChannelStripType:(id)arg1;
- (unsigned char)setChannelStrip:(int)arg1 inData:(id)arg2 inFileName:(id)arg3 inCategory:(id)arg4 usePerformanceMode:(_Bool)arg5;
- (id)channelStripData:(int)arg1 outFileName:(char *)arg2 outCategory:(char *)arg3 cStringLength:(unsigned long long)arg4;
- (void)documentAudioDriverChangedHandler:(id)arg1;
- (id)importedFromMacOSSourceAppBundleID;
- (_Bool)songWasOriginallyImportedFromMacOS;
- (void)_readLogicExportedSongMetaDataIfExisting;
- (void)_clearDocumentCachesIfUUIDsOutOfSyncForDocumentAtPath:(id)arg1;
- (long long)_checkExternalAudioFileReferencesForProjectPath:(id)arg1 sourcePath:(id)arg2;
- (long long)copyExternalAudioFilesToProjectBundleIfNeededWithAudioFilesSourcePath:(id)arg1;
- (void)removeUnusedTrackIconImages;
- (void)removeUnusedAudioFiles;
- (void)_removeUnusedAudioFilesForProjectPath:(id)arg1;
- (void)_removeUnusedFreezeFilesForProjectPath:(id)arg1;
- (void)_compressAudioFilesForProjectPath:(id)arg1;
- (id)_writeScreenshotToPath:(id)arg1 ofType:(id)arg2;
- (void)_writeAdditionalMetaDataToPath:(id)arg1 ofType:(id)arg2;
- (void)_copyOrArchiveAudioFilesFromPath:(id)arg1 toPath:(id)arg2;
- (void)_copyMediaFolderFromPath:(id)arg1 toPath:(id)arg2;
- (_Bool)_doSaveAsToURL:(id)arg1 ofType:(id)arg2 originalContentsURL:(id)arg3 error:(id *)arg4;
- (_Bool)_doSaveToURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (_Bool)_isFile:(id)arg1 inMediaFolderOrAppleLoopLibraryOfProject:(id)arg2;
- (void)checkExternalAudioFileReferencesOnSaveNotificationHandler:(id)arg1;
- (void)checkExternalAudioFileReferencesOnLoadNotificationHandler:(id)arg1;
- (void)saveIfLastSaveOlderThan:(double)arg1 ignoreScreenshot:(_Bool)arg2;
- (void)setSongScreenShotForNextSavingAction:(id)arg1;
- (_Bool)saveMagicMentorShadowCopyToURL:(id)arg1 originalContentsURL:(id)arg2 error:(id *)arg3;
- (id)dataOfType:(id)arg1 error:(id *)arg2;
- (_Bool)writeToURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (_Bool)compressFiles;
- (void)setCompressFiles:(_Bool)arg1;
- (_Bool)saveAsArchive;
- (void)setSaveAsArchive:(_Bool)arg1;
- (_Bool)anyContentFileWasMissingDuringSongLoading;
- (id)missingContentPacksAfterLoadingSong;
- (id)getReferencedContentPacks;
- (id)assembleDocumentAssetsMetaDataDict;
- (_Bool)readFromData:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (_Bool)_checkDocumentSystemAndMachineWithError:(id *)arg1;
- (_Bool)_checkCbDocumentVersion:(int)arg1 error:(id *)arg2;
- (_Bool)_checkDfDocumentVersion:(int)arg1 error:(id *)arg2;
- (_Bool)readFromURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (_Bool)_loadFile:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (void)setAllowOpeningOlderSongVersionsWithProblems:(_Bool)arg1;
- (void)deleteAllSuperfluousAutomationNodes;
- (void)makeAutomationBorderNodesForTrack:(id)arg1 startClock:(long long)arg2 endClock:(long long)arg3;
- (void)makeTempoAutomationBorderNodesAtStartClock:(long long)arg1 endClock:(long long)arg2;
- (void)makeChordAutomationBorderNodesAtStartClock:(long long)arg1 endClock:(long long)arg2;
- (CDStruct_5115be14)automationController:(CDStruct_1ef3fb1f)arg1;
- (void)setAutomationController:(CDStruct_1ef3fb1f)arg1 controller:(CDStruct_5115be14)arg2;
- (int)automationModeForGInstID:(int)arg1;
- (void)setAutomationMode:(int)arg1 forGinstID:(int)arg2;
- (int)transposeAutomationMode;
- (void)setTransposeAutomationMode:(int)arg1;
- (int)tempoAutomationMode;
- (void)setTempoAutomationMode:(int)arg1;
- (void)removeAutomationData:(struct _LgEventFilter *)arg1 ofTrack:(id)arg2;
- (void)addAutomationData:(struct _LgEventFilter *)arg1 ofTrack:(id)arg2 atClock:(long long)arg3 andValue:(long long)arg4;
- (_Bool)hasAutomationForGinstID:(int)arg1 withGenCtrl:(CDStruct_5115be14)arg2;
- (void)copyAutomationFromTrackWithID:(CDStruct_1ef3fb1f)arg1 toTrackWithID:(CDStruct_1ef3fb1f)arg2;
- (void)moveTrackWithID:(CDStruct_1ef3fb1f)arg1 toTrackID:(CDStruct_1ef3fb1f)arg2 makeUndo:(_Bool)arg3;
- (unsigned int)numTracksInFolderWithID:(int)arg1;
- (long long)countTracksOfType:(int)arg1 inFolderWithID:(int)arg2;
- (int)_countTracksCallBack:(struct _LgSongIterator *)arg1:(const struct _LgTrack *)arg2;
- (int)getChannelTypeWithHandle:(const struct _LgTrack *)arg1;
- (_Bool)findTrackWithHandle:(struct _LgTrack *)arg1 trackID:(CDStruct_1ef3fb1f)arg2;
- (void)deleteTrackHandle:(struct _LgTrack *)arg1;
- (struct _LgTrack *)createTrackHandle;
- (_Bool)isTrackSelectedWithHandle:(const struct _LgTrack *)arg1;
- (void)deselectAllEventsWithHandle:(const struct _LgTrack *)arg1;
- (void)deselectAllEventsWithID:(CDStruct_1ef3fb1f)arg1;
- (int)metronomeGInstID;
- (int)getGInstIDWithType:(int)arg1 atIndex:(long long)arg2;
- (int)getGInstIDWithID:(CDStruct_1ef3fb1f)arg1;
- (int)getGInstIDWithHandle:(const struct _LgTrack *)arg1;
- (CDStruct_1ef3fb1f)getTrackIDInFolderWithID:(int)arg1 withGInstID:(int)arg2;
- (CDStruct_1ef3fb1f)getTrackIDWithHandle:(const struct _LgTrack *)arg1;
- (_Bool)getControllerGroupWithHandle:(const struct _LgTrack *)arg1;
- (id)getTrackNameWithHandle:(const struct _LgTrack *)arg1;
- (void)setTrackNameWithHandle:(const struct _LgTrack *)arg1 newName:(id)arg2;
- (id)getTrackNameWithID:(CDStruct_1ef3fb1f)arg1;
- (void)setTrackNameWithID:(CDStruct_1ef3fb1f)arg1 newName:(id)arg2;
- (id)createPlugInViewDataSourceWithIndex:(int)arg1 andSlot:(long long)arg2 ofType:(int)arg3 usingInputObject:(_Bool)arg4;
- (id)poolOfPlugInFlyweights;
- (id)poolOfChannelFlyweights;
- (_Bool)saveSamplerFilesWithInstID:(int)arg1 withExsName:(id)arg2 atInstrumentPath:(id)arg3 andSamplerFilesPath:(id)arg4;
- (_Bool)setPlugInParameterWithInstID:(int)arg1 andSlot:(long long)arg2 isMidiPlugin:(_Bool)arg3 andParameterIndex:(long long)arg4 inOutParameter:(struct _LGPluginParameter *)arg5 useInputObject:(_Bool)arg6;
- (_Bool)getPlugInParameterWithInstID:(int)arg1 andSlot:(long long)arg2 isMidiPlugin:(_Bool)arg3 andParameterIndex:(long long)arg4 inOutParameter:(struct _LGPluginParameter *)arg5 useInputObject:(_Bool)arg6;
- (long long)numberOfPlugInsWithInstID:(int)arg1 andSlot:(long long)arg2;
- (long long)numberOfSlotsWithInstID:(int)arg1;
- (int)channelTypeWithInstID:(int)arg1;
- (_Bool)destroyPlugInEditorWithInstID:(int)arg1 andSlot:(long long)arg2 withPage:(int)arg3;
- (id)plugInEditorViewForInstID:(int)arg1 forSlot:(long long)arg2 withPage:(int)arg3;
- (id)plugInEditorViewControllerForInstID:(int)arg1 forSlot:(long long)arg2 withPage:(int)arg3;
- (void)traceTransientsOfSelectedEvents;
- (void)traceWarpMarkersOfSelectedEvents;
- (void)deQuantizeAndRepairFlexOfRegion:(id)arg1;
- (_Bool)grooveMasterEnabled;
- (void)quantizeTrackWithGrooveTemplate:(id)arg1;
- (void)deleteGrooveTemplate;
- (void)createGrooveTemplateForTrack:(id)arg1;
- (void)deselectAllFlexMarkerOfRegion:(id)arg1;
- (_Bool)hasFlexMarkersOfType:(int)arg1 inRegion:(id)arg2 includingBypassed:(_Bool)arg3;
- (_Bool)hasFlexMarkersOfType:(int)arg1 inTrack:(id)arg2 includingBypassed:(_Bool)arg3;
- (id)flexzoneForMarker:(id)arg1 inRegion:(id)arg2 withMode:(int)arg3;
- (void)finalizeSERegionResizingForFlex;
- (void)finalizeFlexMarkerMovementOfSelectedMarkerInRegion:(id)arg1;
- (void)deleteMarkerAtOffsetClock:(long long)arg1 inRegion:(id)arg2 makeUndo:(_Bool)arg3;
- (void)deleteWarpMarkersOfType:(int)arg1 inTrack:(id)arg2;
- (void)deleteWarpMarkersOfType:(int)arg1 inRegion:(id)arg2;
- (void)moveSelFlexMarker:(id)arg1 inRegion:(id)arg2 toOffsetClock:(long long)arg3;
- (void)findAndSelFlexMarker:(struct _LgEvent *)arg1 inRegion:(id)arg2 atClockOffset:(long long)arg3 inRangeLeftOffsetClock:(long long)arg4 rightOffsetClock:(long long)arg5;
- (void)createAndSelFlexMarker:(struct _LgEvent *)arg1 inRegion:(id)arg2 atClockOffset:(long long)arg3 atTransient:(_Bool)arg4 inRangeLeftBorder:(long long)arg5 rightBorder:(long long)arg6 insertAdjacend:(_Bool)arg7;
- (void)createFlexMarkerAtEndOfAudioRegion:(id)arg1;
- (int)setFlexEditsBypassed:(_Bool)arg1 inRegion:(id)arg2;
- (_Bool)flexModeBypassedStateOfTrack:(id)arg1;
- (int)selectedFlexAudioModeOfChannel:(id)arg1;
- (void)selectFlexAudioMode:(int)arg1 ofChannel:(id)arg2;
- (int)prepareFlexForAllRegionsCheckFT:(_Bool)arg1;
- (int)prepareFlexForAllRegionsOfTrack:(id)arg1 checkFT:(_Bool)arg2;
- (int)prepareFlexForSERegionsCheckFT:(_Bool)arg1;
- (int)prepareFlexInRegion:(id)arg1 checkFT:(_Bool)arg2;
- (int)materialTypeOfRegion:(id)arg1;
- (_Bool)regionHasTransients:(id)arg1;
- (int)createTransientsInAudioRegion:(id)arg1 ForceCreation:(_Bool)arg2;
- (int)createTransientsInAllSelectedAudioRegionsForceCreation:(_Bool)arg1;
- (int)createTransientsInAllAudioRegionsOfTrack:(id)arg1 ForceCreation:(_Bool)arg2;
- (int)createTransientsInAllAudioRegionsForceCreation:(_Bool)arg1;
- (id)getSamplerFileNameForKey:(long long)arg1:(int)arg2;
- (_Bool)setSamplerFileForKey:(long long)arg1:(int)arg2:(long long)arg3:(long long)arg4:(long long)arg5:(BOOL)arg6;
- (_Bool)setSamplerFileNameForKey:(long long)arg1:(int)arg2:(id)arg3;
- (id)currentSamplerInstrumentFromInstID:(int)arg1;
- (void)duplicateSelectedMarkerAt:(long long)arg1 makeUndo:(_Bool)arg2;
- (void)deleteSelectedMarkerMakeUndo:(_Bool)arg1;
- (void)pasteSelectedMarkerAt:(long long)arg1 makeUndo:(_Bool)arg2;
- (void)copySelectedMarkerMakeUndo:(_Bool)arg1;
- (void)cutSelectedMarkerMakeUndo:(_Bool)arg1;
- (void)glueSelectedMarkerMakeUndo:(_Bool)arg1;
- (void)divideSelectedMarkerAt:(long long)arg1 makeUndo:(_Bool)arg2;
- (void)deleteMarker:(id)arg1 makeUndo:(_Bool)arg2;
- (void)setStartClockOfMarker:(id)arg1 byClock:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)setEndClockOfMarker:(id)arg1 byClock:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)setPositionOfMarker:(id)arg1 byClock:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)setPositionOfSelectedMarker:(long long)arg1 makeUndo:(_Bool)arg2;
- (void)setEndClockOfSelectedMarker:(long long)arg1 makeUndo:(_Bool)arg2;
- (void)setStartClockOfSelectedMarker:(long long)arg1 makeUndo:(_Bool)arg2;
- (void)iterateMarkersOfSongWithTarget:(id)arg1 selector:(SEL)arg2 pUser:(void *)arg3 pData:(void *)arg4;
- (_Bool)findMarkerWithID:(int)arg1 markerOut:(struct _LgMarker *)arg2;
- (struct _LgMarker *)createMarkerAt:(long long)arg1 EndClock:(long long)arg2 Name:(id)arg3 MakeUndo:(_Bool)arg4;
- (void)sortMarker;
- (void)deleteMarkerHandle:(struct _LgMarker *)arg1;
- (struct _LgMarker *)createMarkerHandle;
- (void)setMidiClockPort:(unsigned char)arg1;
- (_Bool)midiClockEnabled;
- (void)setMidiClockEnabled:(_Bool)arg1;
- (id)projectNotes;
- (void)setProjectNotes:(id)arg1;
- (void)setActivePluginWindowForTrackID:(CDStruct_1ef3fb1f)arg1 slotClass:(int)arg2;
- (_Bool)hasCopyBufferTrackEvents;
- (_Bool)hasCopyBufferNoteEvents;
- (void)deleteMarkedEvents;
- (long long)getBarQuantize:(int)arg1 clock:(long long)arg2;
- (void)getQuantizeGridInfoForGrooveID:(short)arg1 groove_C_array:(long long *)arg2 arrayCount:(int *)arg3 grooveLength:(long long *)arg4;
- (_Bool)globalKeyChangeTransposesRegions;
- (void)setGlobalKeyChangeTransposesRegions:(_Bool)arg1;
- (void)setGlobalKey:(int)arg1 andMajor:(_Bool)arg2 makeUndo:(_Bool)arg3;
- (void)setMajor:(_Bool)arg1 makeUndo:(_Bool)arg2;
- (id)isMajorAsNoLocalizedString;
- (_Bool)isMajor;
- (id)globalKeyAsNonLocalizedString;
- (int)globalKey;
- (void)setGlobalKey:(int)arg1 makeUndo:(_Bool)arg2;
- (id)tunerStringForMidiNote:(BOOL)arg1;
- (id)tunerStrings;
- (void)_updateTunerStrings;
- (_Bool)isSharp;
- (_Bool)isJoinAllowed:(int)arg1;
- (void)setMarqueeBorderWithLeftClock:(long long)arg1 rightClock:(long long)arg2 topTrackID:(CDStruct_1ef3fb1f)arg3 bottomTrackID:(CDStruct_1ef3fb1f)arg4;
- (void)getMarqueeBorderWithOutLeftClock:(long long *)arg1 outRightClock:(long long *)arg2 outTopTrackID:(CDStruct_1ef3fb1f *)arg3 outBottomTrackID:(CDStruct_1ef3fb1f *)arg4;
- (_Bool)isMarqueeActive;
- (void)resetMarquee;
- (long long)clockFromMilliSeconds:(double)arg1;
- (double)milliSecondsFromClock:(long long)arg1;
- (long long)clockFromDisplay:(long long)arg1 zoomIndex:(float)arg2;
- (long long)clockToDisplay:(long long)arg1 zoomIndex:(float)arg2;
- (void)setDocumentMasterVolume:(float)arg1;
- (float)documentMasterVolume;
- (float)getPrelistenVolume;
- (void)setPrelistenVolume:(float)arg1;
- (id)getPreListenAudioFile;
- (_Bool)preListenAudioFile:(id)arg1 changeFileOnly:(_Bool)arg2;
- (_Bool)isPlayingNotRecording;
- (_Bool)isPlayingOrRecording;
- (_Bool)isRewind;
- (_Bool)isForward;
- (_Bool)isRecordingNotCellRecording;
- (_Bool)isCellRecording;
- (_Bool)isRecording;
- (_Bool)isPause;
- (_Bool)isPlaying;
- (void)return2Clock:(long long)arg1;
- (void)return2Zero;
- (void)rewindWithFeedBackAndPosition:(long long)arg1;
- (void)forwardWithFeedBackAndPosition:(long long)arg1;
- (void)fastRewind;
- (void)fastForward;
- (void)rewind;
- (void)forward;
- (void)pause;
- (void)stop;
- (void)_setSyncWaitFlagForUnprimeHackSequencerDidStart;
- (void)_setSyncWaitFlagForStopCallBack;
- (_Bool)_stopIfNeeded:(_Bool)arg1;
- (_Bool)stopIfNeeded;
- (_Bool)stopIfNeededButKeepClipsPlaying;
- (void)syncToClock:(long long)arg1 withAbsoluteDeviceTimeStamp:(unsigned long long)arg2;
- (long long)syncStartAtAbsoulteHostTimeInNanoSec:(unsigned long long)arg1 withTimeOut:(unsigned long long)arg2;
- (void)_setIsPrimedForSyncedTransportMode:(_Bool)arg1;
- (void)_reenableUserInteractionIfNecessary;
- (void)virtualPlayCallback;
- (void)playCallback;
- (void)playWithVirtualCountIn:(_Bool)arg1;
- (void)play;
- (void)playFromLastStartClock;
- (void)virtualRecordCallback;
- (void)recordCallback;
- (void)stopCellRecordingAndPlayClipAfterwards:(_Bool)arg1;
- (void)startCellRecordingForActiveArrangeClip;
- (void)_doStartCellRecording;
- (void)recordWithVirtualCountIn:(_Bool)arg1;
- (void)record;
- (void)handleVirtualCountInCancel;
- (void)cancelVirtualCountIn:(int)arg1;
- (_Bool)virtualCountInWasCancelled;
- (_Bool)isVirtualCountInRunning;
- (void)setVirtualCountInTempo:(int)arg1;
- (int)virtualCountInTempo;
- (long long)getBufferedSPL;
- (long long)getSPL;
- (long long)rawSPL;
- (void)_setBufferedSPL:(long long)arg1;
- (void)updateBufferedSPL;
- (void)setCellRecordingSPL:(long long)arg1;
- (void)_setBufferedCellRecSPL:(long long)arg1;
- (void)updateBufferedCellRecSPL;
- (long long)bufferedCellRecSPL;
- (long long)rawCellRecSPL;
- (long long)fourQuarterBarLength;
- (long long)barLength;
- (long long)startOffset;
- (void)setSongEndClock:(long long)arg1 postNotification:(_Bool)arg2;
- (long long)songEndClock;
- (long long)songStartClock;
- (void)setPosition:(long long)arg1;
- (long long)clampSongClock:(long long)arg1;
- (long long)clampClock:(long long)arg1;
- (long long)maxClock;
- (long long)maxSongLengthInBars;
- (long long)minClock;
- (void)reviseCycle;
- (void)setRightCycle:(long long)arg1;
- (void)setLeftCycle:(long long)arg1;
- (long long)getRightCycle;
- (long long)getLeftCycle;
- (_Bool)isCycleEnabled;
- (void)enableCycle:(_Bool)arg1;
- (void)iterateRegionsOfFolderWithID:(int)arg1 withTarget:(id)arg2 selector:(SEL)arg3 pUser:(void *)arg4 pData:(void *)arg5;
- (void)iterateTracksOfFolderWithID:(int)arg1 withTarget:(id)arg2 selector:(SEL)arg3 pUser:(void *)arg4 pData:(void *)arg5;
- (void)suppressLoadAudioToRam:(_Bool)arg1;
- (void)_setIsFreezing:(_Bool)arg1;
- (_Bool)isFreezing;
- (void)checkForLoopFamilies;
- (void)doLoopAuthoring:(id)arg1 parameter:(struct _LGLOOPAUTHORING *)arg2 realName:(id)arg3;
- (int)exportSelectedRegionAsAppleLoopFileAtPath:(id)arg1 withAuthoringParameters:(struct _LGLOOPAUTHORING *)arg2;
- (void)setRecordingMode:(int)arg1;
- (void)setDataFormatWithResolution:(long long)arg1 sampleRate:(long long)arg2;
- (void)setCountIn:(_Bool)arg1;
- (void)setMetronomModeForPlay:(_Bool)arg1 andRecord:(_Bool)arg2;
- (void)midiReset;
- (float)getCPULoad;
- (float)getGridHighLatencyCPULoad;
- (float)getGridLowLatencyCPULoad;
- (float)getAutoFreezeCPULoad;
- (int)doBounceToFile:(id)arg1 startClock:(long long)arg2 endClock:(long long)arg3 addEffectTail:(_Bool)arg4 useNormalizer:(_Bool)arg5 useLimiter:(_Bool)arg6 format:(int)arg7 useCurrentSongSampleRate:(_Bool)arg8 use24BitsIfPossible:(_Bool)arg9 createFades:(id)arg10 aacMetaData:(id)arg11 outNormalizeCompensatedVolume:(float *)arg12 aacSilenceFramesAtStart:(unsigned long long)arg13;
- (void)setSignature:(CDStruct_e28e794b)arg1 makeUndo:(_Bool)arg2;
- (CDStruct_e28e794b)signatureAtClock:(long long)arg1;
- (CDStruct_e28e794b)signature;
- (void)checkStretchOwnRecordings;
- (void)clearTempoCurve;
- (void)afterTempoChange;
- (void)beforeTempoChangeWithUndo:(_Bool)arg1;
- (void)beforeTempoChange;
- (void)setFirstTempo:(long long)arg1;
- (long long)tempoForClock:(long long)arg1;
- (long long)firstTempo;
- (_Bool)exchangeAudioFileWithPath:(id)arg1 newPath:(id)arg2;
- (_Bool)compressAudioFileWithID:(long long)arg1 newPath:(id)arg2;
- (void)setAudioFileUserString:(long long)arg1 path:(id)arg2;
- (long long)sampleToClockDiffAtClock:(long long)arg1:(long long)arg2;
- (_Bool)getAudioFileInfo:(id)arg1:(struct DfAudioFileInfo_s *)arg2;
- (_Bool)getAudioFileHandle:(long long)arg1 outHandle:(void **)arg2;
- (struct CGPath *)createLinearOverviewPathForAudioFile:(long long)arg1 startTime:(double)arg2 endTime:(double)arg3 size:(struct CGSize)arg4;
- (struct CGPath *)createReshapedOverviewPathForAudioFile:(long long)arg1 startTime:(double)arg2 endTime:(double)arg3 size:(struct CGSize)arg4 reshapingFunction:(CDUnknownFunctionPointerType)arg5;
- (_Bool)getAudioFileUserString:(long long)arg1 path:(id)arg2;
- (long long)getAudioFileAnnotation:(id)arg1 toBuffer:(void *)arg2 ofSize:(long long)arg3;
- (long long)getAudioFileChannelStrip:(id)arg1 pData:(void *)arg2 size:(long long)arg3;
- (long long)getAudioFileMidiChunk:(id)arg1 pData:(void *)arg2 size:(long long)arg3 outBeatCount:(long long *)arg4 outKey:(long long *)arg5;
- (void)checkSoundFxCanTransposeFlag;
- (void)checkMediaTrack;
- (void)checkMasterTrack;
- (void)setupTracks;
- (void)_deleteTrackWithTrackID:(CDStruct_1ef3fb1f)arg1 makeUndo:(_Bool)arg2;
- (CDStruct_1ef3fb1f)_createTrackWithFolderID:(int)arg1 andTrackIndex:(long long)arg2 andType:(int)arg3 andChannels:(long long)arg4 makeUndo:(_Bool)arg5;
- (_Bool)createTrackPossible:(int)arg1 showAlert:(_Bool)arg2;
- (_Bool)dropFileToArrange:(id)arg1 onTrackWithID:(CDStruct_1ef3fb1f)arg2 atClock:(long long)arg3 sourcePath:(id)arg4 properties:(id)arg5 preventLoadInstrument:(_Bool)arg6 trackName:(id)arg7 iconID:(id)arg8 overWriteTrackNameAndIconID:(_Bool)arg9;
- (_Bool)dropFileToArrange:(id)arg1 onTrackWithID:(CDStruct_1ef3fb1f)arg2 atClock:(long long)arg3 sourcePath:(id)arg4 properties:(id)arg5 preventLoadInstrument:(_Bool)arg6 trackName:(id)arg7;
- (_Bool)dropFileToArrange:(id)arg1 onTrackWithID:(CDStruct_1ef3fb1f)arg2 atClock:(long long)arg3 sourcePath:(id)arg4 properties:(id)arg5 trackName:(id)arg6;
- (_Bool)dropFileToArrange:(id)arg1 onTrackWithID:(CDStruct_1ef3fb1f)arg2 atClock:(long long)arg3 trackName:(id)arg4;
- (_Bool)addAudioFile:(id)arg1 onTrackWithID:(CDStruct_1ef3fb1f)arg2 atClock:(long long)arg3 properties:(id)arg4 ignoreActiveSongParts:(_Bool)arg5;
- (id)projectNameFromAudioFile:(id)arg1;
- (id)fullPathForProjectName:(id)arg1;
- (id)addComponents:(id)arg1 toPathes:(id)arg2;
- (_Bool)addMidiFile:(id)arg1 onTrackWithID:(CDStruct_1ef3fb1f)arg2 atClock:(long long)arg3 beatCount:(long long)arg4 key:(long long)arg5 isMidiFile:(_Bool)arg6 properties:(id)arg7;
- (void)setupSelectedRegionWithPath:(id)arg1 andProperties:(id)arg2;
- (_Bool)isAACFileProteced:(id)arg1;
- (void)selectAllEvents:(_Bool)arg1 inSeq:(int)arg2;
- (int)rootFolderID;
- (void)createUndoStepForAddTrackAndInstInFolder:(int)arg1 withString:(id)arg2;
- (void)createUndoStepForMultipleTrackDeletionWithString:(id)arg1 ginstIDs:(id)arg2;
- (void)createUndoStepForTrackReorderingWithString:(id)arg1;
- (void)createUndoStepForCSTChangeWithString:(id)arg1 includeSelectedRegions:(_Bool)arg2 ginstID:(int)arg3;
- (void)createUndoStepForMarkerWithString:(id)arg1;
- (void)createUndoStepForArrangeAndMarkerWithString:(id)arg1;
- (void)createUndoStepForArrangeAndAutomationWithString:(id)arg1;
- (void)createUndoStepWithPointerGroup:(int)arg1 andSeqID:(long long)arg2 withString:(id)arg3;
- (void)createUndoStepForSelEvents_Tempo_Sign_WithString:(id)arg1;
- (void)createUndoStepForTempoWithString:(id)arg1;
- (void)createUndoStepForTransposeWithString:(id)arg1;
- (void)createUndoStepForPasteOnNewTracks:(int)arg1 withString:(id)arg2;
- (void)createUndoStepForClipFull:(int)arg1 withString:(id)arg2;
- (void)createUndoStepForClipProperties:(int)arg1 withString:(id)arg2;
- (void)createUndoStepForGridFull:(int)arg1 withString:(id)arg2;
- (void)createUndoStepForGrid:(int)arg1 withString:(id)arg2;
- (void)createUndoStepForGenInstCharacterChangeWithString:(id)arg1;
- (void)createUndoStep:(int)arg1 withString:(id)arg2;
- (void)clearUndoHistory;
- (void)clearUndoHistoryDeferredIfNecessary;
- (void)recoverUndoStackFromLogic;
- (void)clearCurrentRecordingSeq;
- (_Bool)currentRecordingSeqContainsBufferedNoteEvents;
- (_Bool)_recoveringUndoStackFromLogic;
- (_Bool)isUndoing;
- (void)undo:(_Bool)arg1;
- (void)__addObjCUndoStepWithName:(id)arg1;
- (void)endUndoGroupWithUndoStepName:(id)arg1;
- (void)beginUndoGroup;
- (int)controlParamForGinstId:(int)arg1 andControlParamId:(int)arg2;
- (_Bool)setControlParam:(int)arg1 ForGinstId:(int)arg2 andControlParamId:(int)arg3;
- (int)controlSlotForGinstId:(int)arg1 andControlSlotId:(int)arg2;
- (_Bool)setControlSlot:(int)arg1 ForGinstId:(int)arg2 andControlSlotId:(int)arg3;
- (int)cstBrowserIconIdForGinstId:(int)arg1;
- (_Bool)setCstBrowserIconId:(int)arg1 forGinstId:(int)arg2;
- (void)convertLoopsOfRegionsToRealRegionsSE;
- (void)songSectionSetLengthWithMarker:(id)arg1 newLength:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)songPartMoveWithMarker:(id)arg1 toClock:(long long)arg2 duplicate:(_Bool)arg3 duplicatedMarkerName:(id)arg4 makeUndo:(_Bool)arg5;
- (void)songPartDeleteWithMarker:(id)arg1 makeUndo:(_Bool)arg2 updateActiveSongPartsIfNecessary:(_Bool)arg3;
- (void)deleteRegionTransfer:(void ***)arg1 stopPreview:(_Bool)arg2;
- (void **)createRegionTransferForRegion:(id)arg1;
- (void)switchLiveMode:(_Bool)arg1 forTrackWithInstID:(int)arg2;
- (_Bool)liveModeIsEnabledForTrackWithInstID:(int)arg1;
- (void)enableLiveModeForTrackWithInstID:(int)arg1;
- (_Bool)setMidiChannel:(int)arg1 channel:(long long)arg2;
- (_Bool)setChaseNotes:(int)arg1 value:(_Bool)arg2;
- (_Bool)chaseNotes:(int)arg1;
- (_Bool)setCanTranspose:(int)arg1 value:(_Bool)arg2;
- (_Bool)canTranspose:(int)arg1;
- (long long)didParameterChange:(int)arg1 outVal:(long long *)arg2 outVal2:(long long *)arg3;
- (int)getTrackIconID:(int)arg1;
- (_Bool)setTrackIconID:(int)arg1 newID:(int)arg2;
- (long long)inputIndexWithInstID:(int)arg1;
- (_Bool)setInputIndex:(long long)arg1 withInstID:(int)arg2;
- (void)fixPluginToChannelModeWithInstID:(int)arg1;
- (void)convertPluginsToStereoWithInstID:(int)arg1;
- (long long)numChannelsWithInstID:(int)arg1;
- (_Bool)getChannelRouting:(int)arg1 outChannelIndex:(long long *)arg2 outType:(int *)arg3;
- (_Bool)setChannelRouting:(int)arg1 toChannelIndex:(long long)arg2 ofType:(int)arg3;
- (_Bool)setChannelInputRouting:(int)arg1 toChannelIndex:(long long)arg2 ofType:(int)arg3;
- (_Bool)setMuteSend2:(int)arg1 setFlag:(_Bool)arg2;
- (_Bool)setMuteSend1:(int)arg1 setFlag:(_Bool)arg2;
- (_Bool)setSend2:(int)arg1 setFloatValue:(float)arg2;
- (_Bool)setSend1:(int)arg1 setFloatValue:(float)arg2;
- (_Bool)setPanSigned64:(int)arg1 value:(int)arg2;
- (_Bool)setPan:(int)arg1 value:(float)arg2;
- (_Bool)setVolume:(int)arg1 value:(float)arg2;
- (float)getInputLevelmeter2:(int)arg1;
- (float)getInputLevelmeter:(int)arg1;
- (float)getLevelmeter2:(int)arg1;
- (float)getNumLevelmeters:(int)arg1;
- (float)getLevelmeter:(int)arg1;
- (float)getCpuLoad:(int)arg1;
- (_Bool)isMuteSend2:(int)arg1;
- (_Bool)isMuteSend1:(int)arg1;
- (float)getSend2:(int)arg1;
- (float)getSend1:(int)arg1;
- (int)getPanSigned64:(int)arg1;
- (float)getPan:(int)arg1;
- (float)getVolume:(int)arg1;
- (_Bool)setFreeze:(int)arg1 activate:(_Bool)arg2;
- (_Bool)setFreezeBypass:(int)arg1 activate:(_Bool)arg2;
- (long long)isFreezed:(int)arg1;
- (_Bool)setInpMonitor:(_Bool)arg1 withInstID:(int)arg2;
- (_Bool)isInpMonitorWithInstID:(int)arg1;
- (_Bool)setTrackRecordEnable:(CDStruct_1ef3fb1f)arg1 value:(_Bool)arg2;
- (_Bool)setSolo:(int)arg1 value:(_Bool)arg2;
- (_Bool)setMute:(int)arg1 value:(_Bool)arg2;
- (_Bool)isTrackRecordEnable:(CDStruct_1ef3fb1f)arg1;
- (_Bool)isSolo:(int)arg1;
- (_Bool)isMute:(int)arg1;
- (_Bool)midiQueueGetEvent:(CDStruct_cf3a1dbf *)arg1 from:(int)arg2;
- (_Bool)midiQueueGetEvent:(CDStruct_cf3a1dbf *)arg1;
- (void)midiQueueReset;
- (void)sendNoteOff:(int)arg1 toInst:(int)arg2 mb3:(unsigned char)arg3;
- (void)sendNoteOn:(int)arg1 toInst:(int)arg2 velocity:(unsigned char)arg3 mb3:(unsigned char)arg4;
- (void)sendNoteOn:(int)arg1 toInst:(int)arg2 velocity:(unsigned char)arg3 mb3:(unsigned char)arg4 eventSource:(int)arg5 eventTimestamp:(unsigned long long)arg6;
- (void)sendNoteOn:(int)arg1 toInst:(int)arg2 velocity:(unsigned char)arg3 mb3:(unsigned char)arg4 eventSource:(int)arg5;
- (void)sendMidiEventToCurrentTrackWithMb0:(unsigned char)arg1 mb1:(unsigned char)arg2 mb2:(unsigned char)arg3 mb3:(unsigned char)arg4;
- (void)sendMidiEventToGInst:(int)arg1 mb0:(unsigned char)arg2 mb1:(unsigned char)arg3 mb2:(unsigned char)arg4 mb3:(unsigned char)arg5;
- (void)sendMidiEventToGInst:(int)arg1 mb0:(unsigned char)arg2 mb1:(unsigned char)arg3 mb2:(unsigned char)arg4 mb3:(unsigned char)arg5 timestamp:(unsigned long long)arg6;
- (void)sendMidiEventToGInst:(int)arg1 mb0:(unsigned char)arg2 mb1:(unsigned char)arg3 mb2:(unsigned char)arg4 mb3:(unsigned char)arg5 eventSource:(int)arg6 timestamp:(unsigned long long)arg7;
- (void)moveAutomationDataSEWithFolderID:(int)arg1 clockDiff:(long long)arg2 trackDiff:(long long)arg3 copy:(_Bool)arg4;
- (void)createEventWithFolderID:(int)arg1 clock:(long long)arg2 length:(long long)arg3 mb0:(unsigned char)arg4 mb1:(unsigned char)arg5 mb2:(unsigned char)arg6 mb3:(unsigned char)arg7 makeUndo:(_Bool)arg8 undoStepName:(id)arg9;
- (void)createEventWithFolderID:(int)arg1 clock:(long long)arg2 length:(long long)arg3 mb0:(unsigned char)arg4 mb1:(unsigned char)arg5 mb2:(unsigned char)arg6 mb3:(unsigned char)arg7 makeUndo:(_Bool)arg8;
- (void)removeRegionOverlaps:(int)arg1 selectedWins:(_Bool)arg2;
- (void)setObjectSolo:(_Bool)arg1;
- (void)loopAutomaticSE:(int)arg1 value:(_Bool)arg2;
- (long long)pasteSEToSeq:(int)arg1 atClock:(long long)arg2 onTrack:(CDStruct_1ef3fb1f)arg3 makeUndo:(_Bool)arg4 quantizePlayHead:(_Bool)arg5 allowLogicSongEndChanges:(_Bool)arg6 adjustMainSequencerSPL:(_Bool)arg7;
- (void)pasteSEToSeq:(int)arg1 atClock:(long long)arg2 onTrack:(CDStruct_1ef3fb1f)arg3 makeUndo:(_Bool)arg4 quantizePlayHead:(_Bool)arg5 allowLogicSongEndChanges:(_Bool)arg6;
- (void)copySEInGrid:(int)arg1;
- (void)copySEInSeq:(int)arg1;
- (void)cutSEInSeq:(int)arg1 makeUndo:(_Bool)arg2;
- (void)followTempoSE:(int)arg1 value:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)quantizeSE:(int)arg1 quantizeType:(int)arg2 makeUndo:(_Bool)arg3;
- (void)quantizeRegion:(id)arg1 quantizeType:(int)arg2 editParam:(int)arg3 makeUndo:(_Bool)arg4;
- (void)transposeSE:(int)arg1 valueDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)glueSE:(int)arg1 makeUndo:(_Bool)arg2;
- (void)changeMB2SE:(int)arg1 valueDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)changeMB1SE:(int)arg1 valueDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)divideSE:(int)arg1 clock:(long long)arg2 makeUndo:(_Bool)arg3 divideSelectionFlag:(int)arg4;
- (void)divideSE:(int)arg1 clock:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)deleteSE:(int)arg1 makeUndo:(_Bool)arg2;
- (void)moveSE:(int)arg1 clockDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)changeLoopEndSE:(int)arg1 clockDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)changeStartClockSE:(int)arg1 clockDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)changeEndClockSE:(int)arg1 clockDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)changeTrackSE:(int)arg1 trackDiff:(long long)arg2 makeUndo:(_Bool)arg3;
- (void)iterateEventsWithTarget:(id)arg1 selector:(SEL)arg2 regionID:(CDStruct_ae571156)arg3 pUser:(void *)arg4 pData:(void *)arg5;
- (void)iterateEventsOfRegion:(id)arg1 withEventType:(unsigned long long)arg2 filter:(struct _LgEventFilter *)arg3 target:(id)arg4 selector:(SEL)arg5 pUser:(void *)arg6 pData:(void *)arg7;
- (void)iterateEventsOfRegion:(id)arg1 target:(id)arg2 selector:(SEL)arg3 pUser:(void *)arg4 pData:(void *)arg5;
- (void)iterateNoteEventsOfRegion:(id)arg1 target:(id)arg2 selector:(SEL)arg3 pUser:(void *)arg4 pData:(void *)arg5;
- (void)iterateNoteEventsWithTarget:(id)arg1 selector:(SEL)arg2 regionID:(CDStruct_ae571156)arg3 pUser:(void *)arg4 pData:(void *)arg5;
- (_Bool)findRegionInFolder:(int)arg1 withRegionID:(CDStruct_ae571156)arg2 outRegion:(struct _LgRegion *)arg3;
- (_Bool)findRegionWithID:(CDStruct_ae571156)arg1 outRegion:(struct _LgRegion *)arg2;
- (void)deleteRegionHandle:(struct _LgRegion *)arg1;
- (struct _LgRegion *)createRegionHandle;

@end

